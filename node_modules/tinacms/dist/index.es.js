var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { EventBus, Modal, ModalPopup, ModalHeader, ModalBody, ModalActions, Button, LoadingDots, useLocalStorage, TinaCMS, BranchSwitcherPlugin, BranchDataProvider, TinaProvider, useCMS, useBranchData, FormMetaPlugin, Form, GlobalFormPlugin, Nav, LocalWarning, FormStatus, FormBuilder } from "@tinacms/toolkit";
export * from "@tinacms/toolkit";
import { TypeInfo, visit, visitWithTypeInfo, getNamedType, GraphQLObjectType, isLeafType, GraphQLUnionType, isScalarType, getIntrospectionQuery, buildClientSchema, print } from "graphql";
import set from "lodash.set";
import gql$1 from "graphql-tag";
import React, { useState, useCallback, useEffect, Fragment, useMemo } from "react";
import styled from "styled-components";
import * as yup from "yup";
import { setEditing, TinaDataContext, useEditState } from "@tinacms/sharedctx";
import { getIn, setIn } from "final-form";
import UrlPattern from "url-pattern";
import { NavLink, useParams, useNavigate, Link, BrowserRouter, Routes, Route } from "react-router-dom";
import { Menu, Transition } from "@headlessui/react";
function popupWindow(url, title, window2, w, h) {
  const y = window2.top.outerHeight / 2 + window2.top.screenY - h / 2;
  const x = window2.top.outerWidth / 2 + window2.top.screenX - w / 2;
  return window2.open(url, title, "toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=no, width=" + w + ", height=" + h + ", top=" + y + ", left=" + x);
}
const TINA_LOGIN_EVENT = "tinaCloudLogin";
const AUTH_TOKEN_KEY = "tinacms-auth";
const authenticate = (clientId, frontendUrl) => {
  return new Promise((resolve) => {
    let authTab;
    window.addEventListener("message", function(e) {
      if (e.data.source === TINA_LOGIN_EVENT) {
        if (authTab) {
          authTab.close();
        }
        resolve({
          id_token: e.data.id_token,
          access_token: e.data.access_token,
          refresh_token: e.data.refresh_token
        });
      }
    });
    const origin = `${window.location.protocol}//${window.location.host}`;
    authTab = popupWindow(`${frontendUrl}/signin?clientId=${clientId}&origin=${origin}`, "_blank", window, 1e3, 700);
  });
};
const formify = (query, schema) => {
  const typeInfo = new TypeInfo(schema);
  const pathsToPopulate = [];
  const visitor = {
    leave(node, key, parent, path, ancestors) {
      const type = typeInfo.getType();
      if (type) {
        const namedType = getNamedType(type);
        if (namedType instanceof GraphQLObjectType) {
          const hasNodeInterface = !!namedType.getInterfaces().find((i) => i.name === "Node");
          if (hasNodeInterface) {
            if (typeof path[path.length - 1] === "number") {
              assertIsObjectType(namedType);
              const valuesNode = namedType.getFields().values;
              const namedValuesNode = getNamedType(valuesNode.type);
              const pathForValues = [...path];
              pathForValues.push("selectionSet");
              pathForValues.push("selections");
              const valuesAst = buildValuesForType(namedValuesNode);
              pathForValues.push(100);
              const formNode = namedType.getFields().form;
              const namedFormNode = getNamedType(formNode.type);
              const pathForForm = [...path];
              pathForForm.push("selectionSet");
              pathForForm.push("selections");
              const formAst = buildFormForType(namedFormNode);
              pathForForm.push(101);
              const sysNode = namedType.getFields().sys;
              const namedSysNode = getNamedType(sysNode.type);
              const pathForSys = [...path];
              pathForSys.push("selectionSet");
              pathForSys.push("selections");
              const sysAst = buildSysForType(namedSysNode);
              pathForSys.push(102);
              pathsToPopulate.push({
                path: path.map((p) => p.toString()).join("-"),
                paths: [
                  {
                    path: pathForValues.map((p) => p.toString()),
                    ast: valuesAst
                  },
                  {
                    path: pathForForm.map((p) => p.toString()),
                    ast: formAst
                  },
                  {
                    path: pathForSys.map((p) => p.toString()),
                    ast: sysAst
                  }
                ]
              });
            }
          }
        }
      }
    }
  };
  visit(query, visitWithTypeInfo(typeInfo, visitor));
  const topLevelPaths = pathsToPopulate.filter((p, i) => {
    const otherPaths = pathsToPopulate.filter((_, index) => index !== i);
    const isChildOfOtherPaths = otherPaths.some((op) => {
      if (p.path.startsWith(op.path)) {
        return true;
      } else {
        return false;
      }
    });
    if (isChildOfOtherPaths) {
      return false;
    } else {
      return true;
    }
  });
  topLevelPaths.map((p) => {
    p.paths.map((pathNode) => {
      set(query, pathNode.path, pathNode.ast);
    });
  });
  return query;
};
const buildSysForType = (type) => {
  assertIsObjectType(type);
  return {
    kind: "Field",
    alias: {
      kind: "Name",
      value: "_internalSys"
    },
    name: {
      kind: "Name",
      value: "sys"
    },
    selectionSet: {
      kind: "SelectionSet",
      selections: buildSelectionsFields(Object.values(type.getFields()), (fields) => {
        return {
          continue: true,
          filteredFields: fields.filter((field) => field.name !== "documents")
        };
      })
    }
  };
};
const buildValuesForType = (type) => {
  try {
    assertIsUnionType(type);
    return {
      kind: "Field",
      name: {
        kind: "Name",
        value: "values"
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: buildSelectionInlineFragments(type.getTypes())
      }
    };
  } catch (e) {
    return {
      kind: "Field",
      name: {
        kind: "Name",
        value: "values"
      }
    };
  }
};
const buildFormForType = (type) => {
  try {
    assertIsUnionType(type);
    return {
      kind: "Field",
      name: {
        kind: "Name",
        value: "form"
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: buildSelectionInlineFragments(type.getTypes())
      }
    };
  } catch (e) {
    return {
      kind: "Field",
      name: {
        kind: "Name",
        value: "form"
      }
    };
  }
};
const buildSelectionInlineFragments = (types, callback) => {
  return types.map((type) => {
    return {
      kind: "InlineFragment",
      typeCondition: {
        kind: "NamedType",
        name: {
          kind: "Name",
          value: type.name
        }
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          ...Object.values(type.getFields()).map((field) => {
            const namedType = getNamedType(field.type);
            if (isLeafType(namedType)) {
              return {
                kind: "Field",
                name: {
                  kind: "Name",
                  value: field.name
                }
              };
            } else if (namedType instanceof GraphQLUnionType) {
              return {
                kind: "Field",
                name: {
                  kind: "Name",
                  value: field.name
                },
                selectionSet: {
                  kind: "SelectionSet",
                  selections: [
                    ...buildSelectionInlineFragments(namedType.getTypes(), callback)
                  ]
                }
              };
            } else if (namedType instanceof GraphQLObjectType) {
              return {
                kind: "Field",
                name: {
                  kind: "Name",
                  value: field.name
                },
                selectionSet: {
                  kind: "SelectionSet",
                  selections: [
                    ...buildSelectionsFields(Object.values(namedType.getFields()), callback)
                  ]
                }
              };
            } else {
              throw new Error(`Unexpected GraphQL type for field ${namedType.name}`);
            }
          })
        ]
      }
    };
  });
};
const buildSelectionsFields = (fields, callback) => {
  let filteredFields = fields;
  if (callback) {
    const result = callback(fields);
    if (!result.continue) {
      if (fields.every((field) => {
        return !isScalarType(getNamedType(field.type));
      })) {
        return [
          {
            kind: "Field",
            name: {
              kind: "Name",
              value: "__typename"
            }
          }
        ];
      }
      return buildSelectionsFields(result.filteredFields.filter((field) => {
        if (isScalarType(getNamedType(field.type))) {
          return true;
        }
        return false;
      }));
    } else {
      filteredFields = result.filteredFields;
    }
  }
  return filteredFields.map((field) => {
    const namedType = getNamedType(field.type);
    if (isLeafType(namedType)) {
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: field.name
        }
      };
    } else if (namedType instanceof GraphQLUnionType) {
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: field.name
        },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            ...buildSelectionInlineFragments(namedType.getTypes(), callback)
          ]
        }
      };
    } else if (namedType instanceof GraphQLObjectType) {
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: field.name
        },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            ...buildSelectionsFields(Object.values(namedType.getFields()), callback)
          ]
        }
      };
    } else {
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: field.name
        },
        selectionSet: {
          kind: "SelectionSet",
          selections: []
        }
      };
    }
  });
};
function assertIsObjectType(type) {
  if (type instanceof GraphQLObjectType)
    ;
  else {
    throw new Error(`Expected an instance of GraphQLObjectType for type ${type.name}`);
  }
}
function assertIsUnionType(type) {
  if (type instanceof GraphQLUnionType)
    ;
  else {
    throw new Error(`Expected an instance of GraphQLUnionType for type ${type.name}`);
  }
}
const captureBranchName = /^refs\/heads\/(.*)/;
const parseRefForBranchName = (ref) => {
  const matches = ref.match(captureBranchName);
  return matches[1];
};
class Client {
  constructor(_a) {
    var _b = _a, { tokenStorage = "MEMORY" } = _b, options = __objRest(_b, ["tokenStorage"]);
    this.events = new EventBus();
    this.addPendingContent = async (props) => {
      const mutation = `#graphql
mutation addPendingDocumentMutation(
  $relativePath: String!
  $collection: String!
  $template: String
) {
  addPendingDocument(
    relativePath: $relativePath
    template: $template
    collection: $collection
  ) {
    ... on Document {
      sys {
        relativePath
        path
        breadcrumbs
        collection {
          slug
        }
      }
    }
  }
}`;
      const result = await this.request(mutation, {
        variables: props
      });
      return result;
    };
    this.getSchema = async () => {
      if (!this.schema) {
        const data = await this.request(getIntrospectionQuery(), {
          variables: {}
        });
        this.schema = buildClientSchema(data);
      }
      return this.schema;
    };
    this.options = options;
    this.setBranch(options.branch);
    this.events.subscribe("branch:change", ({ branchName }) => {
      this.setBranch(branchName);
    });
    this.clientId = options.clientId;
    switch (tokenStorage) {
      case "LOCAL_STORAGE":
        this.getToken = async function() {
          const tokens = localStorage.getItem(AUTH_TOKEN_KEY) || null;
          if (tokens) {
            return await this.getRefreshedToken(tokens);
          } else {
            return {
              access_token: null,
              id_token: null,
              refresh_token: null
            };
          }
        };
        this.setToken = function(token) {
          localStorage.setItem(AUTH_TOKEN_KEY, JSON.stringify(token, null, 2));
        };
        break;
      case "MEMORY":
        this.getToken = async () => {
          if (this.token) {
            return await this.getRefreshedToken(this.token);
          } else {
            return {
              access_token: null,
              id_token: null,
              refresh_token: null
            };
          }
        };
        this.setToken = (token) => {
          this.token = JSON.stringify(token, null, 2);
        };
        break;
      case "CUSTOM":
        if (!options.getTokenFn) {
          throw new Error("When CUSTOM token storage is selected, a getTokenFn must be provided");
        }
        this.getToken = options.getTokenFn;
        break;
    }
  }
  get isLocalMode() {
    return this.contentApiUrl.includes("localhost");
  }
  setBranch(branchName) {
    var _a, _b, _c;
    const encodedBranch = encodeURIComponent(branchName);
    this.frontendUrl = ((_a = this.options.tinaioConfig) == null ? void 0 : _a.frontendUrlOverride) || "https://app.tina.io";
    this.identityApiUrl = ((_b = this.options.tinaioConfig) == null ? void 0 : _b.identityApiUrlOverride) || "https://identity.tinajs.io";
    this.contentApiBase = ((_c = this.options.tinaioConfig) == null ? void 0 : _c.contentApiUrlOverride) || `https://content.tinajs.io`;
    this.contentApiUrl = this.options.customContentApiUrl || `${this.contentApiBase}/content/${this.options.clientId}/github/${encodedBranch}`;
  }
  async requestWithForm(query, { variables }) {
    const schema = await this.getSchema();
    const formifiedQuery = formify(query(gql$1), schema);
    return this.request(print(formifiedQuery), { variables });
  }
  async request(query, { variables }) {
    const res = await fetch(this.contentApiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer " + (await this.getToken()).id_token
      },
      body: JSON.stringify({
        query: typeof query === "function" ? print(query(gql$1)) : query,
        variables
      })
    });
    if (res.status !== 200) {
      throw new Error(`Unable to complete request, ${res.statusText}`);
    }
    const json = await res.json();
    if (json.errors) {
      throw new Error(`Unable to fetch, errors: 
	${json.errors.map((error) => error.message).join("\n")}`);
    }
    return json.data;
  }
  parseJwt(token) {
    const base64Url = token.split(".")[1];
    const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
    const jsonPayload = decodeURIComponent(atob(base64).split("").map(function(c) {
      return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(""));
    return JSON.parse(jsonPayload);
  }
  async getRefreshedToken(tokens) {
    const { access_token, id_token, refresh_token } = JSON.parse(tokens);
    const { exp, iss, client_id } = this.parseJwt(access_token);
    if (Date.now() / 1e3 >= exp) {
      const refreshResponse = await fetch(iss, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-amz-json-1.1",
          "x-amz-target": "AWSCognitoIdentityProviderService.InitiateAuth"
        },
        body: JSON.stringify({
          ClientId: client_id,
          AuthFlow: "REFRESH_TOKEN_AUTH",
          AuthParameters: {
            REFRESH_TOKEN: refresh_token,
            DEVICE_KEY: null
          }
        })
      });
      if (refreshResponse.status !== 200) {
        throw new Error("Unable to refresh auth tokens");
      }
      const responseJson = await refreshResponse.json();
      const newToken = {
        access_token: responseJson.AuthenticationResult.AccessToken,
        id_token: responseJson.AuthenticationResult.IdToken,
        refresh_token
      };
      this.setToken(newToken);
      return Promise.resolve(newToken);
    }
    return Promise.resolve({ access_token, id_token, refresh_token });
  }
  async isAuthorized() {
    return this.isAuthenticated();
  }
  async isAuthenticated() {
    return !!await this.getUser();
  }
  async authenticate() {
    const token = await authenticate(this.clientId, this.frontendUrl);
    this.setToken(token);
    return token;
  }
  async fetchWithToken(input, init) {
    const headers = (init == null ? void 0 : init.headers) || {};
    return await fetch(input, __spreadProps(__spreadValues({}, init), {
      headers: new Headers(__spreadValues({
        Authorization: "Bearer " + (await this.getToken()).id_token
      }, headers))
    }));
  }
  async getUser() {
    if (!this.clientId) {
      return null;
    }
    const url = `${this.identityApiUrl}/v2/apps/${this.clientId}/currentUser`;
    try {
      const res = await this.fetchWithToken(url, {
        method: "GET"
      });
      const val = await res.json();
      if (!res.status.toString().startsWith("2")) {
        console.error(val.error);
        return null;
      }
      return val;
    } catch (e) {
      console.error(e);
      return null;
    }
  }
  async listBranches() {
    const url = `${this.contentApiBase}/github/${this.clientId}/list_branches`;
    const res = await this.fetchWithToken(url, {
      method: "GET"
    });
    return res.json();
  }
  async createBranch({ baseBranch, branchName }) {
    const url = `${this.contentApiBase}/github/${this.clientId}/create_branch`;
    try {
      const res = await this.fetchWithToken(url, {
        method: "POST",
        body: JSON.stringify({
          baseBranch,
          branchName
        }),
        headers: {
          "Content-Type": "application/json"
        }
      });
      return await res.json().then((r) => parseRefForBranchName(r.data.ref));
    } catch (error) {
      console.error("There was an error creating a new branch.", error);
      return null;
    }
  }
}
const DEFAULT_LOCAL_TINA_GQL_SERVER_URL = "http://localhost:4001/graphql";
class LocalClient extends Client {
  constructor(props) {
    const clientProps = {
      clientId: "",
      branch: "",
      customContentApiUrl: props && props.customContentApiUrl ? props.customContentApiUrl : DEFAULT_LOCAL_TINA_GQL_SERVER_URL
    };
    super(clientProps);
  }
  async isAuthorized() {
    return true;
  }
  async isAuthenticated() {
    return true;
  }
}
function ModalBuilder(modalProps) {
  return /* @__PURE__ */ React.createElement(Modal, null, /* @__PURE__ */ React.createElement(ModalPopup, null, /* @__PURE__ */ React.createElement(ModalHeader, null, modalProps.title), /* @__PURE__ */ React.createElement(ModalBody, {
    padded: true
  }, /* @__PURE__ */ React.createElement("p", null, modalProps.message), modalProps.error && /* @__PURE__ */ React.createElement(ErrorLabel, null, modalProps.error)), /* @__PURE__ */ React.createElement(ModalActions, null, modalProps.actions.map((action) => /* @__PURE__ */ React.createElement(AsyncButton, __spreadValues({
    key: action.name
  }, action))))));
}
const ErrorLabel = styled.p`
  color: var(--tina-color-error) !important;
`;
const AsyncButton = ({ name, primary, action }) => {
  const [submitting, setSubmitting] = useState(false);
  const onClick = useCallback(async () => {
    setSubmitting(true);
    try {
      await action();
      setSubmitting(false);
    } catch (e) {
      setSubmitting(false);
      throw e;
    }
  }, [action, setSubmitting]);
  return /* @__PURE__ */ React.createElement(Button, {
    variant: primary ? "primary" : "secondary",
    onClick,
    busy: submitting,
    disabled: submitting
  }, submitting && /* @__PURE__ */ React.createElement(LoadingDots, null), !submitting && name);
};
const TINA_AUTH_CONFIG = "tina_auth_config";
const useTinaAuthRedirect = () => {
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const config = {
      code: urlParams.get("code") || "",
      scope: urlParams.get("scope") || "email",
      state: urlParams.get("state")
    };
    if (!config.code) {
      return;
    }
    localStorage[TINA_AUTH_CONFIG] = JSON.stringify(config);
  }, []);
};
const createClient = ({
  clientId,
  isLocalClient = true,
  branch,
  tinaioConfig
}) => {
  return isLocalClient ? new LocalClient() : new Client({
    clientId: clientId || "",
    branch: branch || "main",
    tokenStorage: "LOCAL_STORAGE",
    tinaioConfig
  });
};
function assertShape(value, yupSchema, errorMessage) {
  const shape = yupSchema(yup);
  try {
    shape.validateSync(value);
  } catch (e) {
    const message = errorMessage || `Failed to assertShape - ${e.message}`;
    throw new Error(message);
  }
}
function safeAssertShape(value, yupSchema) {
  try {
    assertShape(value, yupSchema);
    return true;
  } catch (e) {
    return false;
  }
}
class TinaAdminApi {
  constructor(cms) {
    this.api = cms.api.tina;
  }
  async fetchCollections() {
    const response = await this.api.request(`#graphql
      query{ 
        getCollections { 
          label, 
          name 
        } 
      }`, { variables: {} });
    return response;
  }
  async fetchCollection(collectionName, includeDocuments) {
    const response = await this.api.request(`#graphql
      query($collection: String!, $includeDocuments: Boolean!){
        getCollection(collection: $collection){
          name
          label
          format
          templates
          documents @include(if: $includeDocuments) {
            totalCount
            edges {
              node {
                ... on Document {
                  sys {
                    template
                    breadcrumbs
                    path
                    basename
                    relativePath
                    filename
                    extension
                  }
                }
              }
            }
          }
        }
      }`, { variables: { collection: collectionName, includeDocuments } });
    return response;
  }
  async fetchDocument(collectionName, relativePath) {
    const response = await this.api.request(`#graphql
      query($collection: String!, $relativePath: String!) {
        getDocument(collection:$collection, relativePath:$relativePath) {
          ... on Document {
            form
            values
          }
        }
      }`, { variables: { collection: collectionName, relativePath } });
    return response;
  }
  async fetchDocumentFields() {
    const response = await this.api.request(`#graphql
      query { 
        getDocumentFields 
      }`, { variables: {} });
    return response;
  }
  async createDocument(collectionName, relativePath, params) {
    const response = await this.api.request(`#graphql
      mutation($collection: String!, $relativePath: String!, $params: DocumentMutation!) {
        createDocument(
          collection: $collection,
          relativePath: $relativePath,
          params: $params
        ){__typename}
      }`, {
      variables: {
        collection: collectionName,
        relativePath,
        params
      }
    });
    return response;
  }
  async updateDocument(collectionName, relativePath, params) {
    const response = await this.api.request(`#graphql
      mutation($collection: String!, $relativePath: String!, $params: DocumentMutation!) {
        updateDocument( 
          collection: $collection,
          relativePath: $relativePath,
          params: $params
        ){__typename}
      }`, {
      variables: {
        collection: collectionName,
        relativePath,
        params
      }
    });
    return response;
  }
}
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
const AuthWallInner = ({
  children,
  cms,
  loginScreen,
  getModalActions
}) => {
  const client = cms.api.tina;
  const [activeModal, setActiveModal] = useState(null);
  const [showChildren, setShowChildren] = useState(false);
  React.useEffect(() => {
    client.isAuthenticated().then((isAuthenticated) => {
      if (isAuthenticated) {
        setShowChildren(true);
        cms.enable();
      } else {
        sleep(500).then(() => {
          setActiveModal("authenticate");
        });
      }
    });
  }, []);
  const onAuthSuccess = async () => {
    if (await client.isAuthenticated()) {
      setShowChildren(true);
      setActiveModal(null);
    } else {
      throw new Error("No access to repo");
    }
  };
  const otherModalActions = getModalActions ? getModalActions({
    closeModal: () => {
      setActiveModal(null);
    }
  }) : [];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, activeModal === "authenticate" && /* @__PURE__ */ React.createElement(ModalBuilder, {
    title: "Tina Cloud Authorization",
    message: "To save edits, Tina Cloud authorization is required. On save, changes will get commited using your account.",
    close,
    actions: [
      ...otherModalActions,
      {
        action: async () => {
          setEditing(false);
          window.location.reload();
        },
        name: "Close",
        primary: false
      },
      {
        name: "Continue to Tina Cloud",
        action: async () => {
          await client.authenticate();
          onAuthSuccess();
        },
        primary: true
      }
    ]
  }), showChildren ? children : loginScreen ? loginScreen : null);
};
const TinaCloudProvider = (props) => {
  const baseBranch = props.branch || "main";
  const [currentBranch, setCurrentBranch] = useLocalStorage("tinacms-current-branch", baseBranch);
  useTinaAuthRedirect();
  const cms = React.useMemo(() => props.cms || new TinaCMS({
    enabled: true,
    sidebar: true
  }), [props.cms]);
  if (!cms.api.tina) {
    cms.registerApi("tina", createClient(props));
  }
  const setupMedia = async () => {
    var _a;
    if (props.mediaStore) {
      if ((_a = props.mediaStore.prototype) == null ? void 0 : _a.persist) {
        cms.media.store = new props.mediaStore(cms.api.tina);
      } else {
        const MediaClass = await props.mediaStore();
        cms.media.store = new MediaClass(cms.api.tina);
      }
    }
  };
  const handleListBranches = async () => {
    const { owner, repo } = props;
    const branches = await cms.api.tina.listBranches({ owner, repo });
    if (!Array.isArray(branches)) {
      return [];
    }
    return branches;
  };
  const handleCreateBranch = async (data) => {
    const newBranch = await cms.api.tina.createBranch(data);
    return newBranch;
  };
  setupMedia();
  React.useMemo(() => {
    if (cms.flags.get("tina-admin") === true) {
      cms.registerApi("admin", new TinaAdminApi(cms));
    }
  }, [cms, cms.flags.get("tina-admin")]);
  const [branchingEnabled, setBranchingEnabled] = React.useState(() => cms.flags.get("branch-switcher"));
  React.useEffect(() => {
    cms.events.subscribe("flag:set", ({ key, value }) => {
      if (key === "branch-switcher") {
        setBranchingEnabled(value);
      }
    });
  }, [cms.events]);
  React.useEffect(() => {
    let branchSwitcher;
    if (branchingEnabled) {
      branchSwitcher = new BranchSwitcherPlugin({
        listBranches: handleListBranches,
        createBranch: handleCreateBranch
      });
      cms.plugins.add(branchSwitcher);
    }
    return () => {
      if (branchingEnabled && branchSwitcher) {
        cms.plugins.remove(branchSwitcher);
      }
    };
  }, [branchingEnabled, props.branch]);
  React.useEffect(() => {
    if (props.cmsCallback) {
      props.cmsCallback(cms);
    }
  }, []);
  return /* @__PURE__ */ React.createElement(BranchDataProvider, {
    currentBranch,
    setCurrentBranch: (b) => {
      setCurrentBranch(b);
    }
  }, /* @__PURE__ */ React.createElement(TinaProvider, {
    cms
  }, /* @__PURE__ */ React.createElement(AuthWallInner, __spreadProps(__spreadValues({}, props), {
    cms
  }))));
};
const TinaCloudAuthWall = TinaCloudProvider;
function useGraphqlForms({
  variables,
  onSubmit,
  formify: formify2 = null,
  query
}) {
  const cms = useCMS();
  const [formValues, setFormValues] = React.useState({});
  const [data, setData] = React.useState(null);
  const [initialData, setInitialData] = React.useState({});
  const [pendingReset, setPendingReset] = React.useState(null);
  const [isLoading, setIsLoading] = React.useState(true);
  const [newUpdate, setNewUpdate] = React.useState(null);
  const { currentBranch } = useBranchData();
  const updateData = async () => {
    var _a;
    if (newUpdate) {
      const newValue = getIn(formValues, newUpdate.get);
      const activeForm = getIn(data, [newUpdate.queryName, "form"].join("."));
      if (!activeForm) {
        throw new Error(`Unable to find form for query ${newUpdate.queryName}`);
      }
      if (activeForm == null ? void 0 : activeForm.paths) {
        const asyncUpdate = (_a = activeForm.paths) == null ? void 0 : _a.find((p) => p.dataPath.join(".") === newUpdate.setReference);
        if (asyncUpdate) {
          const res = await cms.api.tina.request(asyncUpdate.queryString, {
            variables: { id: newValue }
          });
          const newData2 = setIn(data, newUpdate.set, res.node);
          const newDataAndNewJSONData2 = setIn(newData2, newUpdate.set.replace("data", "dataJSON"), newValue);
          setData(newDataAndNewJSONData2);
          setNewUpdate(null);
          return;
        }
      }
      if (newUpdate.lookup) {
        const field = getFieldUpdate(newUpdate, activeForm, formValues);
        if (field && field.typeMap) {
          newValue.forEach((item) => {
            if (!item.__typename) {
              item["__typename"] = field.typeMap[item._template];
            }
          });
        }
      }
      const newData = setIn(data, newUpdate.set, newValue);
      const newDataAndNewJSONData = setIn(newData, newUpdate.set.replace("data", "dataJSON"), newValue);
      setData(newDataAndNewJSONData);
      setNewUpdate(null);
    }
  };
  React.useEffect(() => {
    updateData();
  }, [JSON.stringify(formValues)]);
  React.useEffect(() => {
    if (pendingReset) {
      setData(__spreadProps(__spreadValues({}, data), { [pendingReset]: initialData[pendingReset] }));
      setPendingReset(null);
    }
  }, [pendingReset]);
  React.useEffect(() => {
    if (!query) {
      setIsLoading(false);
      return;
    }
    const formIds = [];
    setIsLoading(true);
    cms.api.tina.requestWithForm((gql2) => gql2(query), {
      variables
    }).then((payload) => {
      cms.plugins.remove(new FormMetaPlugin({ name: "tina-admin-link" }));
      setData(payload);
      setInitialData(payload);
      setIsLoading(false);
      Object.entries(payload).map(([queryName, result]) => {
        formIds.push(queryName);
        const canBeFormified = safeAssertShape(result, (yup2) => yup2.object({
          values: yup2.object().required(),
          form: yup2.object().required()
        }));
        if (!canBeFormified) {
          return;
        }
        assertShape(result, (yup2) => yup2.object({
          values: yup2.object().required(),
          form: yup2.object().required()
        }), `Unable to build form shape for fields at ${queryName}`);
        const formConfig = {
          id: queryName,
          label: result.form.label,
          initialValues: result.values,
          fields: result.form.fields,
          reset: () => {
            setPendingReset(queryName);
          },
          onSubmit: async (payload2) => {
            try {
              const params = transformDocumentIntoMutationRequestPayload(payload2, result.form.mutationInfo);
              const variables2 = { params };
              const mutationString = result.form.mutationInfo.string;
              if (onSubmit) {
                onSubmit({
                  queryString: mutationString,
                  mutationString,
                  variables: variables2
                });
              } else {
                try {
                  await cms.api.tina.request(mutationString, {
                    variables: variables2
                  });
                  cms.alerts.success("Document saved!");
                } catch (e) {
                  cms.alerts.error("There was a problem saving your document");
                  console.error(e);
                }
              }
            } catch (e) {
              console.error(e);
              cms.alerts.error("There was a problem saving your document");
            }
          }
        };
        const { createForm, createGlobalForm } = generateFormCreators(cms);
        const SKIPPED = "SKIPPED";
        let form;
        let skipped;
        const skip = () => {
          skipped = SKIPPED;
        };
        if (skipped)
          return;
        if (formify2) {
          form = formify2({ formConfig, createForm, createGlobalForm, skip }, cms);
        } else {
          form = createForm(formConfig);
        }
        if (!(form instanceof Form)) {
          if (skipped === SKIPPED) {
            return;
          }
          throw new Error("formify must return a form or skip()");
        }
        const { change } = form.finalForm;
        form.finalForm.change = (name, value) => {
          let referenceName = "";
          if (typeof name === "string") {
            referenceName = name.split(".").filter((item) => isNaN(Number(item))).join(".");
          } else {
            throw new Error(`Expected name to be of type string for FinalForm change callback`);
          }
          setNewUpdate({
            queryName,
            get: [queryName, "values", name].join("."),
            set: [queryName, "data", name].join("."),
            setReference: [queryName, "data", referenceName].join(".")
          });
          return change(name, value);
        };
        const _a = form.finalForm.mutators, { insert, move, remove } = _a, rest = __objRest(_a, ["insert", "move", "remove"]);
        const prepareNewUpdate = (name, lookup) => {
          const extra = {};
          if (lookup) {
            extra["lookup"] = lookup;
          }
          const referenceName = name.split(".").filter((item) => isNaN(Number(item))).join(".");
          setNewUpdate(__spreadValues({
            queryName,
            get: [queryName, "values", name].join("."),
            set: [queryName, "data", name].join("."),
            setReference: [queryName, "data", referenceName].join(".")
          }, extra));
        };
        form.finalForm.mutators = __spreadValues({
          insert: (...args) => {
            const fieldName = args[0];
            prepareNewUpdate(fieldName, fieldName);
            insert(...args);
          },
          move: (...args) => {
            const fieldName = args[0];
            prepareNewUpdate(fieldName, fieldName);
            move(...args);
          },
          remove: (...args) => {
            const fieldName = args[0];
            prepareNewUpdate(fieldName, fieldName);
            remove(...args);
          }
        }, rest);
        form.subscribe(({ values }) => {
          setFormValues(__spreadProps(__spreadValues({}, formValues), { [queryName]: { values } }));
        }, { values: true });
      });
    }).catch((e) => {
      cms.alerts.error("There was a problem setting up forms for your query");
      console.error("There was a problem setting up forms for your query");
      console.error(e);
      setIsLoading(false);
    });
    return () => {
      formIds.forEach((name) => {
        const formPlugin = cms.forms.find(name);
        if (formPlugin) {
          cms.forms.remove(formPlugin);
        }
      });
    };
  }, [query, JSON.stringify(variables), currentBranch]);
  return [data, isLoading];
}
const transformDocumentIntoMutationRequestPayload = (document, instructions) => {
  const _a = document, { _collection, __typename, _template } = _a, rest = __objRest(_a, ["_collection", "__typename", "_template"]);
  const params = transformParams(rest);
  const paramsWithTemplate = instructions.includeTemplate ? { [_template]: params } : params;
  return instructions.includeCollection ? { [_collection]: paramsWithTemplate } : paramsWithTemplate;
};
const transformParams = (data) => {
  if (["string", "number", "boolean"].includes(typeof data)) {
    return data;
  }
  if (Array.isArray(data)) {
    return data.map((item) => transformParams(item));
  }
  try {
    assertShape(data, (yup2) => yup2.object({ _template: yup2.string().required() }));
    const _a = data, { _template, __typename } = _a, rest = __objRest(_a, ["_template", "__typename"]);
    const nested = transformParams(rest);
    return { [_template]: nested };
  } catch (e) {
    if (e.message === "Failed to assertShape - _template is a required field") {
      if (!data) {
        return [];
      }
      const accum = {};
      Object.entries(data).map(([keyName, value]) => {
        accum[keyName] = transformParams(value);
      });
      return accum;
    } else {
      if (!data) {
        return [];
      }
      throw e;
    }
  }
};
const getFieldUpdate = (newUpdate, activeForm, formValues) => {
  const items = newUpdate.lookup.split(".");
  let currentFields = activeForm.fields;
  items.map((item, index) => {
    const lookupName = items.slice(0, index + 1).join(".");
    const value = getIn(formValues, [newUpdate.queryName, "values", lookupName].join("."));
    if (isNaN(Number(item))) {
      if (Array.isArray(currentFields)) {
        currentFields = currentFields.find((field) => field.name === item);
      }
    } else {
      const template = currentFields.templates ? currentFields.templates[value._template] : currentFields;
      currentFields = template.fields;
    }
  });
  return currentFields;
};
const generateFormCreators = (cms) => {
  const createForm = (formConfig) => {
    const form = new Form(formConfig);
    cms.forms.add(form);
    return form;
  };
  const createGlobalForm = (formConfig, options) => {
    const form = new Form(formConfig);
    cms.plugins.add(new GlobalFormPlugin(form, options == null ? void 0 : options.icon, options == null ? void 0 : options.layout));
    return form;
  };
  return { createForm, createGlobalForm };
};
class ContentCreatorPlugin {
  constructor(options) {
    this.__type = "content-creator";
    this.fields = options.fields;
    this.name = options.label;
    this.onNewDocument = options.onNewDocument;
    this.collections = options.collections;
    this.onChange = options.onChange;
    this.initialValues = options.initialValues;
  }
  async onSubmit({ collection, template, relativePath }, cms) {
    try {
      const selectedCollection = this.collections.find((collectionItem) => collectionItem.slug === collection);
      const collectionFormat = selectedCollection.format;
      const extensionLength = -1 * (collectionFormat.length + 1);
      let relativePathWithExt = relativePath;
      if (relativePath.slice(extensionLength).toLocaleLowerCase() === `.${collectionFormat}`) {
        relativePathWithExt = `${relativePath.slice(0, -3)}.${collectionFormat}`;
      } else {
        relativePathWithExt = `${relativePath}.${collectionFormat}`;
      }
      const payload = {
        relativePath: relativePathWithExt,
        collection,
        template
      };
      try {
        const res = await cms.api.tina.addPendingContent(payload);
        if (res.errors) {
          res.errors.map((e) => {
            cms.alerts.error(e.message);
          });
        } else {
          cms.alerts.info("Document created!");
          if (typeof this.onNewDocument === "function") {
            this.onNewDocument(res.addPendingDocument.sys);
          }
        }
      } catch (e) {
        cms.alerts.error(e.message);
      }
    } catch (e) {
      cms.alerts.error(e.message);
    }
  }
}
const useDocumentCreatorPlugin = (args) => {
  const cms = useCMS();
  const [values, setValues] = React.useState({});
  const [plugin, setPlugin] = React.useState(null);
  React.useEffect(() => {
    const run = async () => {
      var _a;
      const res = await cms.api.tina.request((gql2) => gql2`
          {
            getCollections {
              label
              slug
              format
              templates
            }
          }
        `, { variables: {} });
      const allCollectionOptions = [];
      res.getCollections.forEach((collection) => {
        const value = collection.slug;
        const label = `${collection.label}`;
        allCollectionOptions.push({ value, label });
      });
      let collectionOptions;
      if (args && args.filterCollections && typeof args.filterCollections === "function") {
        const filtered = args.filterCollections(allCollectionOptions);
        collectionOptions = [
          { value: "", label: "Choose Collection" },
          ...filtered
        ];
      } else {
        collectionOptions = [
          { value: "", label: "Choose Collection" },
          ...allCollectionOptions
        ];
      }
      const templateOptions = [
        { value: "", label: "Choose Template" }
      ];
      if (values.collection) {
        const filteredCollection = res.getCollections.find((c) => c.slug === values.collection);
        (_a = filteredCollection == null ? void 0 : filteredCollection.templates) == null ? void 0 : _a.forEach((template) => {
          templateOptions.push({ value: template.name, label: template.label });
        });
      }
      setPlugin(new ContentCreatorPlugin({
        label: "Add Document",
        onNewDocument: args && args.onNewDocument,
        collections: res.getCollections,
        onChange: async ({ values: values2 }) => {
          setValues(values2);
        },
        initialValues: values,
        fields: [
          {
            component: "select",
            name: "collection",
            label: "Collection",
            description: "Select the collection.",
            options: collectionOptions,
            validate: async (value, allValues, meta) => {
              if (!value) {
                return true;
              }
            }
          },
          {
            component: "select",
            name: "template",
            label: "Template",
            description: "Select the template.",
            options: templateOptions,
            validate: async (value, allValues, meta) => {
              if (!value && templateOptions.length > 1) {
                if (meta.dirty) {
                  return "Required";
                }
                return true;
              }
            }
          },
          {
            component: "text",
            name: "relativePath",
            label: "Name",
            description: `A unique name for the content. Example: "newPost" or "blog_022021`,
            placeholder: "newPost",
            validate: (value, allValues, meta) => {
              if (!value) {
                if (meta.dirty) {
                  return "Required";
                }
                return true;
              }
              const isValid = /^[_a-zA-Z][-,_a-zA-Z0-9]*$/.test(value);
              if (value && !isValid) {
                return "Must begin with a-z, A-Z, or _ and contain only a-z, A-Z, 0-9, - or _";
              }
            }
          }
        ]
      }));
    };
    run();
  }, [cms]);
  React.useEffect(() => {
    if (plugin) {
      cms.plugins.add(plugin);
    }
    return () => {
      if (plugin) {
        cms.plugins.remove(plugin);
      }
    };
  }, [plugin]);
};
var styles = `/**
Use a better box model (opinionated).
*/

.tina-tailwind *,
.tina-tailwind ::before,
.tina-tailwind ::after {
	box-sizing: border-box;
}

/**
Use a more readable tab size (opinionated).
*/

.tina-tailwind html {
	-moz-tab-size: 4;
	tab-size: 4;
}

/**
1. Correct the line height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
*/

.tina-tailwind html {
	line-height: 1.15; /* 1 */
	-webkit-text-size-adjust: 100%; /* 2 */
}

/**
Remove the margin in all browsers.
*/

.tina-tailwind body {
	margin: 0;
}

/**
Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)
*/

.tina-tailwind body {
	font-family:
		system-ui,
		-apple-system, /* Firefox supports this but not yet \`system-ui\` */
		'Segoe UI',
		Roboto,
		Helvetica,
		Arial,
		sans-serif,
		'Apple Color Emoji',
		'Segoe UI Emoji';
}

/**
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
*/

.tina-tailwind hr {
	height: 0; /* 1 */
	color: inherit; /* 2 */
}

/**
Add the correct text decoration in Chrome, Edge, and Safari.
*/

.tina-tailwind abbr[title] {
	text-decoration: underline dotted;
}

/**
Add the correct font weight in Edge and Safari.
*/

.tina-tailwind b,
.tina-tailwind strong {
	font-weight: bolder;
}

/**
1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)
2. Correct the odd 'em' font sizing in all browsers.
*/

.tina-tailwind code,
.tina-tailwind kbd,
.tina-tailwind samp,
.tina-tailwind pre {
	font-family:
		ui-monospace,
		SFMono-Regular,
		Consolas,
		'Liberation Mono',
		Menlo,
		monospace; /* 1 */
	font-size: 1em; /* 2 */
}

/**
Add the correct font size in all browsers.
*/

.tina-tailwind small {
	font-size: 80%;
}

/**
Prevent 'sub' and 'sup' elements from affecting the line height in all browsers.
*/

.tina-tailwind sub,
.tina-tailwind sup {
	font-size: 75%;
	line-height: 0;
	position: relative;
	vertical-align: baseline;
}

/*
Text-level semantics
====================
*/

.tina-tailwind sub {
	bottom: -0.25em;
}

/*
Grouping content
================
*/

.tina-tailwind sup {
	top: -0.5em;
}

/**
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
*/

.tina-tailwind table {
	text-indent: 0; /* 1 */
	border-color: inherit; /* 2 */
}

/**
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
*/

.tina-tailwind button,
.tina-tailwind input,
.tina-tailwind optgroup,
.tina-tailwind select,
.tina-tailwind textarea {
	font-family: inherit; /* 1 */
	font-size: 100%; /* 1 */
	line-height: 1.15; /* 1 */
	margin: 0; /* 2 */
}

/**
Remove the inheritance of text transform in Edge and Firefox.
1. Remove the inheritance of text transform in Firefox.
*/

.tina-tailwind button,
.tina-tailwind select { /* 1 */
	text-transform: none;
}

/**
Correct the inability to style clickable types in iOS and Safari.
*/

.tina-tailwind button,
.tina-tailwind [type='button'],
.tina-tailwind [type='reset'],
.tina-tailwind [type='submit'] {
	-webkit-appearance: button;
}

/**
Remove the inner border and padding in Firefox.
*/

.tina-tailwind ::-moz-focus-inner {
	border-style: none;
	padding: 0;
}

/**
Restore the focus styles unset by the previous rule.
*/

.tina-tailwind :-moz-focusring {
	outline: 1px dotted ButtonText;
}

/**
Remove the additional ':invalid' styles in Firefox.
See: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737
*/

.tina-tailwind :-moz-ui-invalid {
	box-shadow: none;
}

/**
Remove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.
*/

.tina-tailwind legend {
	padding: 0;
}

/**
Add the correct vertical alignment in Chrome and Firefox.
*/

.tina-tailwind progress {
	vertical-align: baseline;
}

/**
Correct the cursor style of increment and decrement buttons in Safari.
*/

.tina-tailwind ::-webkit-inner-spin-button,
.tina-tailwind ::-webkit-outer-spin-button {
	height: auto;
}

/**
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

.tina-tailwind [type='search'] {
	-webkit-appearance: textfield; /* 1 */
	outline-offset: -2px; /* 2 */
}

/**
Remove the inner padding in Chrome and Safari on macOS.
*/

.tina-tailwind ::-webkit-search-decoration {
	-webkit-appearance: none;
}

/**
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to 'inherit' in Safari.
*/

.tina-tailwind ::-webkit-file-upload-button {
	-webkit-appearance: button; /* 1 */
	font: inherit; /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

.tina-tailwind summary {
	display: list-item;
}

/**
 * Removes the default spacing and border for appropriate elements.
 */

.tina-tailwind blockquote,
.tina-tailwind dl,
.tina-tailwind dd,
.tina-tailwind h1,
.tina-tailwind h2,
.tina-tailwind h3,
.tina-tailwind h4,
.tina-tailwind h5,
.tina-tailwind h6,
.tina-tailwind hr,
.tina-tailwind figure,
.tina-tailwind p,
.tina-tailwind pre {
  margin: 0;
}

/**
 * Manually forked from SUIT CSS Base: https://github.com/suitcss/base
 * A thin layer on top of normalize.css that provides a starting point more
 * suitable for web applications.
 */

.tina-tailwind button {
  background-color: transparent;
  background-image: none;
}

/*
Interactive
===========
*/

.tina-tailwind fieldset {
  margin: 0;
  padding: 0;
}

/*
Forms
=====
*/

.tina-tailwind ol,
.tina-tailwind ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

/**
 * 1. Use the user's configured \`sans\` font-family (with Tailwind's default
 *    sans-serif font stack as a fallback) as a sane default.
 * 2. Use Tailwind's default "normal" line-height so the user isn't forced
 *    to override it to ensure consistency even when using the default theme.
 */

.tina-tailwind html {
  font-family: Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 1 */
  line-height: 1.5; /* 2 */
}

/**
 * Inherit font-family and line-height from \`html\` so users can set them as
 * a class directly on the \`html\` element.
 */

.tina-tailwind body {
  font-family: inherit;
  line-height: inherit;
}

/**
 * 1. Prevent padding and border from affecting element width.
 *
 *    We used to set this in the html element and inherit from
 *    the parent element for everything else. This caused issues
 *    in shadow-dom-enhanced elements like <details> where the content
 *    is wrapped by a div with box-sizing set to \`content-box\`.
 *
 *    https://github.com/mozdevs/cssremedy/issues/4
 *
 *
 * 2. Allow adding a border to an element by just adding a border-width.
 *
 *    By default, the way the browser specifies that an element should have no
 *    border is by setting it's border-style to \`none\` in the user-agent
 *    stylesheet.
 *
 *    In order to easily add borders to elements by just setting the \`border-width\`
 *    property, we change the default border-style for all elements to \`solid\`, and
 *    use border-width to hide them instead. This way our \`border\` utilities only
 *    need to set the \`border-width\` property instead of the entire \`border\`
 *    shorthand, making our border utilities much more straightforward to compose.
 *
 *    https://github.com/tailwindcss/tailwindcss/pull/116
 */

.tina-tailwind *,
.tina-tailwind ::before,
.tina-tailwind ::after {
  box-sizing: border-box; /* 1 */
  border-width: 0; /* 2 */
  border-style: solid; /* 2 */
  border-color: currentColor; /* 2 */
}

/*
 * Ensure horizontal rules are visible by default
 */

.tina-tailwind hr {
  border-top-width: 1px;
}

/**
 * Undo the \`border-style: none\` reset that Normalize applies to images so that
 * our \`border-{width}\` utilities have the expected effect.
 *
 * The Normalize reset is unnecessary for us since we default the border-width
 * to 0 on all elements.
 *
 * https://github.com/tailwindcss/tailwindcss/issues/362
 */

.tina-tailwind img {
  border-style: solid;
}

/**
 * Tailwind custom reset styles
 */

.tina-tailwind textarea {
  resize: vertical;
}

/*
Tabular data
============
*/

.tina-tailwind input::placeholder,
.tina-tailwind textarea::placeholder {
  opacity: 1;
  color: #918c9e;
}

/*
Sections
========
*/

.tina-tailwind button,
.tina-tailwind [role="button"] {
  cursor: pointer;
}

/**
 * Override legacy focus reset from Normalize with modern Firefox focus styles.
 *
 * This is actually an improvement over the new defaults in Firefox in our testing,
 * as it triggers the better focus styles even for links, which still use a dotted
 * outline in Firefox by default.
 */

.tina-tailwind :-moz-focusring {
	outline: auto;
}

/*
Document
========
*/

.tina-tailwind table {
  border-collapse: collapse;
}

/*! modern-normalize v1.1.0 | MIT License | https://github.com/sindresorhus/modern-normalize */

.tina-tailwind h1,
.tina-tailwind h2,
.tina-tailwind h3,
.tina-tailwind h4,
.tina-tailwind h5,
.tina-tailwind h6 {
  font-size: inherit;
  font-weight: inherit;
}

/**
 * Reset links to optimize for opt-in styling instead of
 * opt-out.
 */

.tina-tailwind a {
  color: inherit;
  text-decoration: inherit;
}

/**
 * Reset form element properties that are easy to forget to
 * style explicitly so you don't inadvertently introduce
 * styles that deviate from your design system. These styles
 * supplement a partial reset that is already applied by
 * normalize.css.
 */

.tina-tailwind button,
.tina-tailwind input,
.tina-tailwind optgroup,
.tina-tailwind select,
.tina-tailwind textarea {
  padding: 0;
  line-height: inherit;
  color: inherit;
}

/**
 * Use the configured 'mono' font family for elements that
 * are expected to be rendered with a monospace font, falling
 * back to the system monospace stack if there is no configured
 * 'mono' font family.
 */

.tina-tailwind pre,
.tina-tailwind code,
.tina-tailwind kbd,
.tina-tailwind samp {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}

/**
 * 1. Make replaced elements \`display: block\` by default as that's
 *    the behavior you want almost all of the time. Inspired by
 *    CSS Remedy, with \`svg\` added as well.
 *
 *    https://github.com/mozdevs/cssremedy/issues/14
 * 
 * 2. Add \`vertical-align: middle\` to align replaced elements more
 *    sensibly by default when overriding \`display\` by adding a
 *    utility like \`inline\`.
 *
 *    This can trigger a poorly considered linting error in some
 *    tools but is included by design.
 * 
 *    https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210
 */

.tina-tailwind img,
.tina-tailwind svg,
.tina-tailwind video,
.tina-tailwind canvas,
.tina-tailwind audio,
.tina-tailwind iframe,
.tina-tailwind embed,
.tina-tailwind object {
  display: block; /* 1 */
  vertical-align: middle; /* 2 */
}

/**
 * Constrain images and videos to the parent width and preserve
 * their intrinsic aspect ratio.
 *
 * https://github.com/mozdevs/cssremedy/issues/14
 */

.tina-tailwind img,
.tina-tailwind video {
  max-width: 100%;
  height: auto;
}

/**
 * Ensure the default browser behavior of the \`hidden\` attribute.
 */

.tina-tailwind [hidden] {
  display: none;
}

/*! tailwindcss v2.2.19 | MIT License | https://tailwindcss.com
*/

.tina-tailwind *, .tina-tailwind ::before, .tina-tailwind ::after {
	--tw-translate-x: 0;
	--tw-translate-y: 0;
	--tw-rotate: 0;
	--tw-skew-x: 0;
	--tw-skew-y: 0;
	--tw-scale-x: 1;
	--tw-scale-y: 1;
	--tw-transform: translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.tina-tailwind *, .tina-tailwind ::before, .tina-tailwind ::after {
	--tw-border-opacity: 1;
	border-color: rgba(225, 221, 236, var(--tw-border-opacity));
}

.tina-tailwind *, .tina-tailwind ::before, .tina-tailwind ::after {
	--tw-ring-offset-shadow: 0 0 #0000;
	--tw-ring-shadow: 0 0 #0000;
	--tw-shadow: 0 0 #0000;
}

.tina-tailwind *, .tina-tailwind ::before, .tina-tailwind ::after {
	--tw-ring-inset: var(--tw-empty,/*!*/ /*!*/);
	--tw-ring-offset-width: 0px;
	--tw-ring-offset-color: #fff;
	--tw-ring-color: rgba(0, 132, 255, 0.5);
	--tw-ring-offset-shadow: 0 0 #0000;
	--tw-ring-shadow: 0 0 #0000;
	--tw-shadow: 0 0 #0000;
}

.tina-tailwind *, .tina-tailwind ::before, .tina-tailwind ::after {
	--tw-blur: var(--tw-empty,/*!*/ /*!*/);
	--tw-brightness: var(--tw-empty,/*!*/ /*!*/);
	--tw-contrast: var(--tw-empty,/*!*/ /*!*/);
	--tw-grayscale: var(--tw-empty,/*!*/ /*!*/);
	--tw-hue-rotate: var(--tw-empty,/*!*/ /*!*/);
	--tw-invert: var(--tw-empty,/*!*/ /*!*/);
	--tw-saturate: var(--tw-empty,/*!*/ /*!*/);
	--tw-sepia: var(--tw-empty,/*!*/ /*!*/);
	--tw-drop-shadow: var(--tw-empty,/*!*/ /*!*/);
	--tw-filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

.tina-tailwind .static {
	position: static !important;
}

.tina-tailwind .fixed {
	position: fixed !important;
}

.tina-tailwind .absolute {
	position: absolute !important;
}

.tina-tailwind .relative {
	position: relative !important;
}

.tina-tailwind .left-0 {
	left: 0px !important;
}

.tina-tailwind .right-0 {
	right: 0px !important;
}

.tina-tailwind .bottom-2 {
	bottom: 8px !important;
}

.tina-tailwind .right-5 {
	right: 20px !important;
}

.tina-tailwind .z-50 {
	z-index: 50 !important;
}

.tina-tailwind .mx-auto {
	margin-left: auto !important;
	margin-right: auto !important;
}

.tina-tailwind .mr-2 {
	margin-right: 8px !important;
}

.tina-tailwind .mb-2 {
	margin-bottom: 8px !important;
}

.tina-tailwind .mb-1 {
	margin-bottom: 4px !important;
}

.tina-tailwind .-mt-0\\.5 {
	margin-top: -2px !important;
}

.tina-tailwind .-mt-0 {
	margin-top: 0px !important;
}

.tina-tailwind .ml-1 {
	margin-left: 4px !important;
}

.tina-tailwind .mt-2 {
	margin-top: 8px !important;
}

.tina-tailwind .mr-1\\.5 {
	margin-right: 6px !important;
}

.tina-tailwind .mr-1 {
	margin-right: 4px !important;
}

.tina-tailwind .block {
	display: block !important;
}

.tina-tailwind .inline-block {
	display: inline-block !important;
}

.tina-tailwind .flex {
	display: flex !important;
}

.tina-tailwind .inline-flex {
	display: inline-flex !important;
}

.tina-tailwind .table {
	display: table !important;
}

.tina-tailwind .h-screen {
	height: 100vh !important;
}

.tina-tailwind .h-auto {
	height: auto !important;
}

.tina-tailwind .h-full {
	height: 100% !important;
}

.tina-tailwind .h-6 {
	height: 24px !important;
}

.tina-tailwind .h-10 {
	height: 40px !important;
}

.tina-tailwind .h-5 {
	height: 20px !important;
}

.tina-tailwind .w-full {
	width: 100% !important;
}

.tina-tailwind .w-10 {
	width: 40px !important;
}

.tina-tailwind .w-auto {
	width: auto !important;
}

.tina-tailwind .w-5 {
	width: 20px !important;
}

.tina-tailwind .w-56 {
	width: 224px !important;
}

.tina-tailwind .w-0 {
	width: 0px !important;
}

.tina-tailwind .w-6 {
	width: 24px !important;
}

.tina-tailwind .max-w-lg {
	max-width: 32rem !important;
}

.tina-tailwind .max-w-screen-xl {
	max-width: 1280px !important;
}

.tina-tailwind .max-w-form {
	max-width: 900px !important;
}

.tina-tailwind .max-w-full {
	max-width: 100% !important;
}

.tina-tailwind .flex-1 {
	flex: 1 1 0% !important;
}

.tina-tailwind .table-auto {
	table-layout: auto !important;
}

.tina-tailwind .origin-top-right {
	transform-origin: top right !important;
}

.tina-tailwind .translate-y-full {
	--tw-translate-y: 100% !important;
	transform: var(--tw-transform) !important;
}

.tina-tailwind .-translate-y-2 {
	--tw-translate-y: -8px !important;
	transform: var(--tw-transform) !important;
}

.tina-tailwind .translate-y-0 {
	--tw-translate-y: 0px !important;
	transform: var(--tw-transform) !important;
}

.tina-tailwind .scale-95 {
	--tw-scale-x: .95 !important;
	--tw-scale-y: .95 !important;
	transform: var(--tw-transform) !important;
}

.tina-tailwind .scale-100 {
	--tw-scale-x: 1 !important;
	--tw-scale-y: 1 !important;
	transform: var(--tw-transform) !important;
}

.tina-tailwind .transform {
	transform: var(--tw-transform) !important;
}

.tina-tailwind .flex-col {
	flex-direction: column !important;
}

.tina-tailwind .items-end {
	align-items: flex-end !important;
}

.tina-tailwind .items-center {
	align-items: center !important;
}

.tina-tailwind .items-stretch {
	align-items: stretch !important;
}

.tina-tailwind .justify-center {
	justify-content: center !important;
}

.tina-tailwind .justify-between {
	justify-content: space-between !important;
}

.tina-tailwind .gap-0\\.5 {
	gap: 2px !important;
}

.tina-tailwind .gap-0 {
	gap: 0px !important;
}

.tina-tailwind .gap-4 {
	gap: 16px !important;
}

.tina-tailwind .gap-3 {
	gap: 12px !important;
}

.tina-tailwind .divide-y > :not([hidden]) ~ :not([hidden]) {
	--tw-divide-y-reverse: 0 !important;
	border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse))) !important;
	border-bottom-width: calc(1px * var(--tw-divide-y-reverse)) !important;
}

.tina-tailwind .overflow-hidden {
	overflow: hidden !important;
}

.tina-tailwind .overflow-y-auto {
	overflow-y: auto !important;
}

.tina-tailwind .whitespace-nowrap {
	white-space: nowrap !important;
}

.tina-tailwind .rounded-lg {
	border-radius: 8px !important;
}

.tina-tailwind .rounded-full {
	border-radius: 9999px !important;
}

.tina-tailwind .rounded-md {
	border-radius: 6px !important;
}

.tina-tailwind .border {
	border-width: 1px !important;
}

.tina-tailwind .border-b {
	border-bottom-width: 1px !important;
}

.tina-tailwind .border-gray-200 {
	--tw-border-opacity: 1 !important;
	border-color: rgba(225, 221, 236, var(--tw-border-opacity)) !important;
}

.tina-tailwind .border-transparent {
	border-color: transparent !important;
}

.tina-tailwind .bg-white {
	--tw-bg-opacity: 1 !important;
	background-color: rgba(255, 255, 255, var(--tw-bg-opacity)) !important;
}

.tina-tailwind .bg-gray-50 {
	--tw-bg-opacity: 1 !important;
	background-color: rgba(246, 246, 249, var(--tw-bg-opacity)) !important;
}

.tina-tailwind .bg-blue-500 {
	--tw-bg-opacity: 1 !important;
	background-color: rgba(0, 132, 255, var(--tw-bg-opacity)) !important;
}

.tina-tailwind .bg-gradient-to-b {
	background-image: linear-gradient(to bottom, var(--tw-gradient-stops)) !important;
}

.tina-tailwind .from-blue-900 {
	--tw-gradient-from: #1D2C6C !important;
	--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(29, 44, 108, 0)) !important;
}

.tina-tailwind .to-gray-900 {
	--tw-gradient-to: #252336 !important;
}

.tina-tailwind .px-4 {
	padding-left: 16px !important;
	padding-right: 16px !important;
}

.tina-tailwind .py-6 {
	padding-top: 24px !important;
	padding-bottom: 24px !important;
}

.tina-tailwind .px-5 {
	padding-left: 20px !important;
	padding-right: 20px !important;
}

.tina-tailwind .py-4 {
	padding-top: 16px !important;
	padding-bottom: 16px !important;
}

.tina-tailwind .px-12 {
	padding-left: 48px !important;
	padding-right: 48px !important;
}

.tina-tailwind .py-10 {
	padding-top: 40px !important;
	padding-bottom: 40px !important;
}

.tina-tailwind .px-20 {
	padding-left: 80px !important;
	padding-right: 80px !important;
}

.tina-tailwind .px-6 {
	padding-left: 24px !important;
	padding-right: 24px !important;
}

.tina-tailwind .py-1 {
	padding-top: 4px !important;
	padding-bottom: 4px !important;
}

.tina-tailwind .py-2 {
	padding-top: 8px !important;
	padding-bottom: 8px !important;
}

.tina-tailwind .py-3 {
	padding-top: 12px !important;
	padding-bottom: 12px !important;
}

.tina-tailwind .px-8 {
	padding-left: 32px !important;
	padding-right: 32px !important;
}

.tina-tailwind .pb-4 {
	padding-bottom: 16px !important;
}

.tina-tailwind .pt-18 {
	padding-top: 72px !important;
}

.tina-tailwind .text-left {
	text-align: left !important;
}

.tina-tailwind .text-center {
	text-align: center !important;
}

.tina-tailwind .font-sans {
	font-family: Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !important;
}

.tina-tailwind .text-2xl {
	font-size: 24px !important;
	line-height: 1.33 !important;
}

.tina-tailwind .text-base {
	font-size: 16px !important;
	line-height: 1.5 !important;
}

.tina-tailwind .text-sm {
	font-size: 14px !important;
	line-height: 1.43 !important;
}

.tina-tailwind .text-xl {
	font-size: 20px !important;
	line-height: 1.4 !important;
}

.tina-tailwind .text-md {
	font-size: 16px !important;
	line-height: 1.5 !important;
}

.tina-tailwind .text-xs {
	font-size: 13px !important;
	line-height: 1.33 !important;
}

.tina-tailwind .font-medium {
	font-weight: 500 !important;
}

.tina-tailwind .uppercase {
	text-transform: uppercase !important;
}

.tina-tailwind .italic {
	font-style: italic !important;
}

.tina-tailwind .leading-normal {
	line-height: 1.5 !important;
}

.tina-tailwind .leading-tight {
	line-height: 1.25 !important;
}

.tina-tailwind .leading-5 {
	line-height: 20px !important;
}

.tina-tailwind .leading-4 {
	line-height: 16px !important;
}

.tina-tailwind .tracking-wide {
	letter-spacing: 0.025em !important;
}

.tina-tailwind .text-gray-700 {
	--tw-text-opacity: 1 !important;
	color: rgba(67, 62, 82, var(--tw-text-opacity)) !important;
}

.tina-tailwind .text-blue-600 {
	--tw-text-opacity: 1 !important;
	color: rgba(5, 116, 228, var(--tw-text-opacity)) !important;
}

.tina-tailwind .text-gray-500 {
	--tw-text-opacity: 1 !important;
	color: rgba(113, 108, 127, var(--tw-text-opacity)) !important;
}

.tina-tailwind .text-gray-400 {
	--tw-text-opacity: 1 !important;
	color: rgba(145, 140, 158, var(--tw-text-opacity)) !important;
}

.tina-tailwind .text-current {
	color: currentColor !important;
}

.tina-tailwind .text-white {
	--tw-text-opacity: 1 !important;
	color: rgba(255, 255, 255, var(--tw-text-opacity)) !important;
}

.tina-tailwind .text-gray-600 {
	--tw-text-opacity: 1 !important;
	color: rgba(86, 81, 101, var(--tw-text-opacity)) !important;
}

.tina-tailwind .text-gray-800 {
	--tw-text-opacity: 1 !important;
	color: rgba(54, 49, 69, var(--tw-text-opacity)) !important;
}

.tina-tailwind .text-gray-900 {
	--tw-text-opacity: 1 !important;
	color: rgba(37, 35, 54, var(--tw-text-opacity)) !important;
}

.tina-tailwind .text-blue-500 {
	--tw-text-opacity: 1 !important;
	color: rgba(0, 132, 255, var(--tw-text-opacity)) !important;
}

.tina-tailwind .text-blue-400 {
	--tw-text-opacity: 1 !important;
	color: rgba(34, 150, 254, var(--tw-text-opacity)) !important;
}

.tina-tailwind .underline {
	text-decoration: underline !important;
}

.tina-tailwind .opacity-100 {
	opacity: 1 !important;
}

.tina-tailwind .opacity-90 {
	opacity: .9 !important;
}

.tina-tailwind .opacity-80 {
	opacity: .8 !important;
}

.tina-tailwind .opacity-50 {
	opacity: .5 !important;
}

.tina-tailwind .opacity-70 {
	opacity: .7 !important;
}

.tina-tailwind .opacity-0 {
	opacity: 0 !important;
}

.tina-tailwind .shadow-lg {
	--tw-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05) !important;
	box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow) !important;
}

.tina-tailwind .shadow-2xl {
	--tw-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25) !important;
	box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow) !important;
}

.tina-tailwind .shadow {
	--tw-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06) !important;
	box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow) !important;
}

.tina-tailwind .shadow-sm {
	--tw-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05) !important;
	box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow) !important;
}

.tina-tailwind .ring-1 {
	--tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color) !important;
	--tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color) !important;
	box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000) !important;
}

.tina-tailwind .ring-black {
	--tw-ring-opacity: 1 !important;
	--tw-ring-color: rgba(0, 0, 0, var(--tw-ring-opacity)) !important;
}

.tina-tailwind .ring-opacity-5 {
	--tw-ring-opacity: .05 !important;
}

.tina-tailwind .filter {
	filter: var(--tw-filter) !important;
}

.tina-tailwind .transition-opacity {
	transition-property: opacity !important;
	transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !important;
	transition-duration: 150ms !important;
}

.tina-tailwind .transition-colors {
	transition-property: background-color, border-color, color, fill, stroke !important;
	transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !important;
	transition-duration: 150ms !important;
}

.tina-tailwind .transition-all {
	transition-property: all !important;
	transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !important;
	transition-duration: 150ms !important;
}

.tina-tailwind .transition {
	transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter !important;
	transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !important;
	transition-duration: 150ms !important;
}

.tina-tailwind .duration-300 {
	transition-duration: 300ms !important;
}

.tina-tailwind .duration-150 {
	transition-duration: 150ms !important;
}

.tina-tailwind .duration-100 {
	transition-duration: 100ms !important;
}

.tina-tailwind .duration-75 {
	transition-duration: 75ms !important;
}

.tina-tailwind .ease-out {
	transition-timing-function: cubic-bezier(0, 0, 0.2, 1) !important;
}

.tina-tailwind .ease-in {
	transition-timing-function: cubic-bezier(0.4, 0, 1, 1) !important;
}

.tina-tailwind .ease-in-out {
	transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !important;
}

.tina-tailwind .icon-parent svg {
        fill: currentColor !important;
      }

.tina-tailwind {
    font-family: Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --tw-text-opacity: 1;
    color: rgba(86, 81, 101, var(--tw-text-opacity));
}

.first\\:pt-3:first-child {
	padding-top: 12px !important;
}

.last\\:pb-3:last-child {
	padding-bottom: 12px !important;
}

.hover\\:bg-blue-600:hover {
	--tw-bg-opacity: 1 !important;
	background-color: rgba(5, 116, 228, var(--tw-bg-opacity)) !important;
}

.hover\\:bg-gray-50:hover {
	--tw-bg-opacity: 1 !important;
	background-color: rgba(246, 246, 249, var(--tw-bg-opacity)) !important;
}

.hover\\:text-blue-600:hover {
	--tw-text-opacity: 1 !important;
	color: rgba(5, 116, 228, var(--tw-text-opacity)) !important;
}

.hover\\:text-blue-400:hover {
	--tw-text-opacity: 1 !important;
	color: rgba(34, 150, 254, var(--tw-text-opacity)) !important;
}

.hover\\:opacity-100:hover {
	opacity: 1 !important;
}

.hover\\:opacity-80:hover {
	opacity: .8 !important;
}

.focus\\:text-blue-400:focus {
	--tw-text-opacity: 1 !important;
	color: rgba(34, 150, 254, var(--tw-text-opacity)) !important;
}

.focus\\:underline:focus {
	text-decoration: underline !important;
}

.focus\\:shadow-outline:focus {
	--tw-shadow: 0 0 0 3px rgba(66, 153, 225, 0.5) !important;
	box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow) !important;
}

.focus\\:outline-none:focus {
	outline: 2px solid transparent !important;
	outline-offset: 2px !important;
}

.focus\\:ring-2:focus {
	--tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color) !important;
	--tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color) !important;
	box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000) !important;
}

.focus\\:ring-blue-500:focus {
	--tw-ring-opacity: 1 !important;
	--tw-ring-color: rgba(0, 132, 255, var(--tw-ring-opacity)) !important;
}

.group:hover .group-hover\\:opacity-100 {
	opacity: 1 !important;
}
`;
function useTina({
  query,
  variables,
  data
}) {
  const {
    setRequest,
    state,
    isDummyContainer,
    isLoading: contextLoading
  } = React.useContext(TinaDataContext);
  const [waitForContextRerender, setWaitForContextRerender] = useState(!isDummyContainer);
  const isLoading = contextLoading || waitForContextRerender;
  React.useEffect(() => {
    setRequest({ query, variables });
  }, [JSON.stringify(variables), query]);
  useEffect(() => {
    if (!isDummyContainer) {
      setTimeout(() => setWaitForContextRerender(false), 0);
    }
    return () => {
      setRequest(void 0);
    };
  }, [isDummyContainer]);
  return {
    data: isDummyContainer || isLoading ? data : state.payload,
    isLoading
  };
}
const errorButtonStyles = {
  background: "#eb6337",
  padding: "12px 18px",
  cursor: "pointer",
  borderRadius: "50px",
  textTransform: "uppercase",
  letterSpacing: "2px",
  fontWeight: "bold",
  border: "none",
  color: "white",
  margin: "1rem 0"
};
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      hasError: props.hasError,
      message: "",
      pageRefresh: false
    };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, message: error.message };
  }
  render() {
    const branchData = window.localStorage && window.localStorage.getItem("tinacms-current-branch");
    const hasBranchData = branchData && branchData.length > 0;
    if (this.state.hasError && !this.state.pageRefresh) {
      return /* @__PURE__ */ React.createElement("div", {
        style: {
          background: "#efefef",
          height: "100vh",
          display: "flex",
          alignItems: "center",
          justifyContent: "center"
        }
      }, /* @__PURE__ */ React.createElement("style", null, "            body {              margin: 0;            }          "), /* @__PURE__ */ React.createElement("div", {
        style: {
          background: "#fff",
          maxWidth: "400px",
          padding: "20px",
          fontFamily: "'Inter', sans-serif",
          borderRadius: "5px",
          boxShadow: "0 6px 24px rgb(0 37 91 / 5%), 0 2px 4px rgb(0 37 91 / 3%)"
        }
      }, /* @__PURE__ */ React.createElement("h3", {
        style: { color: "#eb6337" }
      }, "TinaCMS Render Error"), /* @__PURE__ */ React.createElement("p", null, "Tina caught an error while updating the page:"), /* @__PURE__ */ React.createElement("pre", {
        style: { marginTop: "1rem", overflowX: "auto" }
      }, this.state.message), /* @__PURE__ */ React.createElement("br", null), /* @__PURE__ */ React.createElement("p", null, `If you've just updated the form, undo your most recent changes and click "refresh". If after a few refreshes, you're still encountering this error. There is a bigger issue with the site. Please reach out to your site admin.`), /* @__PURE__ */ React.createElement("button", {
        style: errorButtonStyles,
        onClick: () => {
          this.setState({ pageRefresh: true });
          setTimeout(() => this.setState({ hasError: false, pageRefresh: false }), 3e3);
        }
      }, "Refresh"), hasBranchData && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", null, `If you're using the branch switcher, you may currently be on a "stale" branch that has been deleted or whose content is not compatible with the latest version of the site's layout. Click the button below to switch back to the default branch for this deployment.`), /* @__PURE__ */ React.createElement("button", {
        style: errorButtonStyles,
        onClick: () => {
          window.localStorage.removeItem("tinacms-current-branch");
          window.location.reload();
        }
      }, "Switch to default branch"))));
    }
    if (this.state.pageRefresh) {
      return /* @__PURE__ */ React.createElement(Loader, null, "Let's try that again.");
    }
    return this.props.children;
  }
}
const parseURL = (url) => {
  if (url.includes("localhost")) {
    return { branch: null, isLocalClient: true, clientId: null };
  }
  const tinaHost = "content.tinajs.io";
  const params = new URL(url);
  const pattern = new UrlPattern("/content/:clientId/github/:branch");
  const result = pattern.match(params.pathname);
  if (params.host !== tinaHost) {
    throw new Error(`The only supported hosts are ${tinaHost} or localhost, but received ${params.host}.`);
  }
  return __spreadProps(__spreadValues({}, result), {
    isLocalClient: false
  });
};
const TinaCMSProvider2 = (_c) => {
  var _d = _c, {
    query,
    documentCreatorCallback,
    formifyCallback
  } = _d, props = __objRest(_d, [
    "query",
    "documentCreatorCallback",
    "formifyCallback"
  ]);
  const validOldSetup = new Boolean(props == null ? void 0 : props.isLocalClient) || new Boolean(props == null ? void 0 : props.clientId) && new Boolean(props == null ? void 0 : props.branch);
  if (!props.apiURL && !validOldSetup) {
    throw new Error(`apiURL is a required field`);
  }
  const { branch, clientId, isLocalClient } = props.apiURL ? parseURL(props.apiURL) : {
    branch: props.branch,
    clientId: props.clientId,
    isLocalClient: props.isLocalClient
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(TinaCloudProvider, {
    branch,
    clientId,
    tinaioConfig: props.tinaioConfig,
    isLocalClient,
    cmsCallback: props.cmsCallback,
    mediaStore: props.mediaStore
  }, /* @__PURE__ */ React.createElement("style", null, styles), /* @__PURE__ */ React.createElement(ErrorBoundary, null, /* @__PURE__ */ React.createElement(DocumentCreator, {
    documentCreatorCallback
  }), /* @__PURE__ */ React.createElement(TinaDataProvider, {
    formifyCallback
  }, typeof props.children == "function" ? /* @__PURE__ */ React.createElement(TinaQuery, __spreadProps(__spreadValues({}, props), {
    variables: props.variables,
    data: props.data,
    query,
    formifyCallback,
    children: props.children
  })) : props.children))));
};
const DocumentCreator = ({
  documentCreatorCallback
}) => {
  useDocumentCreatorPlugin(documentCreatorCallback);
  return null;
};
const TinaQuery = (props) => {
  return /* @__PURE__ */ React.createElement(TinaQueryInner, __spreadValues({
    key: `rootQuery-${props.query}`
  }, props));
};
const TinaQueryInner = (_e) => {
  var _f = _e, { children } = _f, props = __objRest(_f, ["children"]);
  const { data: liveData, isLoading } = useTina({
    query: props.query,
    variables: props.variables,
    data: props.data
  });
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children(isLoading || !props.query ? props : __spreadProps(__spreadValues({}, props), { data: liveData })));
};
const TinaDataProvider = ({
  children,
  formifyCallback
}) => {
  const [request, setRequest] = useState();
  const [state, setState] = React.useState({
    payload: void 0,
    isLoading: true
  });
  return /* @__PURE__ */ React.createElement(TinaDataContext.Provider, {
    value: {
      setRequest,
      isLoading: state.isLoading,
      state: { payload: state.payload }
    }
  }, /* @__PURE__ */ React.createElement(FormRegistrar, {
    key: request == null ? void 0 : request.query,
    request,
    formifyCallback,
    onPayloadStateChange: setState
  }), children);
};
const FormRegistrar = ({
  request,
  formifyCallback,
  onPayloadStateChange
}) => {
  const cms = useCMS();
  const [payload, isLoading] = useGraphqlForms({
    query: request == null ? void 0 : request.query,
    variables: request == null ? void 0 : request.variables,
    formify: (args) => {
      if (formifyCallback) {
        return formifyCallback(args, cms);
      } else {
        return args.createForm(args.formConfig);
      }
    }
  });
  React.useEffect(() => {
    onPayloadStateChange({ payload, isLoading });
  }, [JSON.stringify(payload), isLoading]);
  return isLoading ? /* @__PURE__ */ React.createElement(Loader, null, /* @__PURE__ */ React.createElement(React.Fragment, null)) : null;
};
const Loader = (props) => {
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
    style: {
      position: "fixed",
      background: "rgba(0, 0, 0, 0.5)",
      inset: 0,
      zIndex: 200,
      opacity: "0.8",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      padding: "40px"
    }
  }, /* @__PURE__ */ React.createElement("div", {
    style: {
      background: "#f6f6f9",
      boxShadow: "0px 2px 3px rgba(0, 0, 0, 0.05), 0 4px 12px rgba(0, 0, 0, 0.1)",
      borderRadius: "5px",
      padding: "40px 32px",
      width: "460px",
      maxWidth: "90%",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexDirection: "column"
    }
  }, /* @__PURE__ */ React.createElement("svg", {
    style: {
      width: "64px",
      color: "#2296fe",
      marginTop: "-8px",
      marginBottom: "16px"
    },
    version: "1.1",
    id: "L5",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    x: "0px",
    y: "0px",
    viewBox: "0 0 100 64",
    enableBackground: "new 0 0 0 0",
    xmlSpace: "preserve"
  }, /* @__PURE__ */ React.createElement("circle", {
    fill: "currentColor",
    stroke: "none",
    cx: 6,
    cy: 32,
    r: 6
  }, /* @__PURE__ */ React.createElement("animateTransform", {
    attributeName: "transform",
    dur: "1s",
    type: "translate",
    values: "0 15 ; 0 -15; 0 15",
    calcMode: "spline",
    keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
    repeatCount: "indefinite",
    begin: "0.1"
  })), /* @__PURE__ */ React.createElement("circle", {
    fill: "currentColor",
    stroke: "none",
    cx: 30,
    cy: 32,
    r: 6
  }, /* @__PURE__ */ React.createElement("animateTransform", {
    attributeName: "transform",
    dur: "1s",
    type: "translate",
    values: "0 15 ; 0 -10; 0 15",
    calcMode: "spline",
    keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
    repeatCount: "indefinite",
    begin: "0.2"
  })), /* @__PURE__ */ React.createElement("circle", {
    fill: "currentColor",
    stroke: "none",
    cx: 54,
    cy: 32,
    r: 6
  }, /* @__PURE__ */ React.createElement("animateTransform", {
    attributeName: "transform",
    dur: "1s",
    type: "translate",
    values: "0 15 ; 0 -5; 0 15",
    calcMode: "spline",
    keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
    repeatCount: "indefinite",
    begin: "0.3"
  }))), /* @__PURE__ */ React.createElement("p", {
    style: {
      fontSize: "18px",
      color: "#252336",
      textAlign: "center",
      lineHeight: "1.3",
      fontFamily: "'Inter', sans-serif",
      fontWeight: "normal"
    }
  }, "Please wait, Tina is loading data..."))), props.children);
};
const getStaticPropsForTina = async ({
  query,
  variables
}) => {
  try {
    const data = await staticRequest({ query, variables });
    return JSON.parse(JSON.stringify({
      data,
      query,
      variables
    }));
  } catch (e) {
    return JSON.parse(JSON.stringify({
      data: {},
      query,
      variables
    }));
  }
};
function is_server() {
  return !(typeof window != "undefined" && window.document);
}
const staticRequest = async ({
  query,
  variables
}) => {
  const client = new LocalClient();
  if (!is_server()) {
    console.warn(`Whoops! Looks like you are using \`staticRequest\` in the browser to fetch data.

The local server is not available outside of \`getStaticProps\` or \`getStaticPaths\` functions.
This function should only be called on the server at build time.

This will work when developing locally but NOT when deployed to production.
`);
  }
  return client.request(query, { variables });
};
function gql(strings, ...args) {
  let str = "";
  strings.forEach((string, i) => {
    str += string + (args[i] || "");
  });
  return str;
}
const Layout = ({ children }) => {
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("style", null, styles), /* @__PURE__ */ React.createElement("div", {
    className: "tina-tailwind",
    style: {
      position: "fixed",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      overflow: "auto",
      background: "#F6F6F9",
      fontFamily: "'Inter', sans-serif",
      zIndex: 9999
    }
  }, children));
};
var DefaultContext = {
  color: void 0,
  size: void 0,
  className: void 0,
  style: void 0,
  attr: void 0
};
var IconContext = React.createContext && React.createContext(DefaultContext);
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function Tree2Element(tree) {
  return tree && tree.map(function(node, i) {
    return React.createElement(node.tag, __assign({
      key: i
    }, node.attr), Tree2Element(node.child));
  });
}
function GenIcon(data) {
  return function(props) {
    return React.createElement(IconBase, __assign({
      attr: __assign({}, data.attr)
    }, props), Tree2Element(data.child));
  };
}
function IconBase(props) {
  var elem = function(conf) {
    var attr = props.attr, size = props.size, title = props.title, svgProps = __rest(props, ["attr", "size", "title"]);
    var computedSize = size || conf.size || "1em";
    var className;
    if (conf.className)
      className = conf.className;
    if (props.className)
      className = (className ? className + " " : "") + props.className;
    return React.createElement("svg", __assign({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, conf.attr, attr, svgProps, {
      className,
      style: __assign(__assign({
        color: props.color || conf.color
      }, conf.style), props.style),
      height: computedSize,
      width: computedSize,
      xmlns: "http://www.w3.org/2000/svg"
    }), title && React.createElement("title", null, title), props.children);
  };
  return IconContext !== void 0 ? React.createElement(IconContext.Consumer, null, function(conf) {
    return elem(conf);
  }) : elem(DefaultContext);
}
function ImFilesEmpty(props) {
  return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M14.341 5.579c-0.347-0.473-0.831-1.027-1.362-1.558s-1.085-1.015-1.558-1.362c-0.806-0.591-1.197-0.659-1.421-0.659h-5.75c-0.689 0-1.25 0.561-1.25 1.25v11.5c0 0.689 0.561 1.25 1.25 1.25h9.5c0.689 0 1.25-0.561 1.25-1.25v-7.75c0-0.224-0.068-0.615-0.659-1.421zM12.271 4.729c0.48 0.48 0.856 0.912 1.134 1.271h-2.406v-2.405c0.359 0.278 0.792 0.654 1.271 1.134v0zM14 14.75c0 0.136-0.114 0.25-0.25 0.25h-9.5c-0.136 0-0.25-0.114-0.25-0.25v-11.5c0-0.135 0.114-0.25 0.25-0.25 0 0 5.749-0 5.75 0v3.5c0 0.276 0.224 0.5 0.5 0.5h3.5v7.75z" } }, { "tag": "path", "attr": { "d": "M9.421 0.659c-0.806-0.591-1.197-0.659-1.421-0.659h-5.75c-0.689 0-1.25 0.561-1.25 1.25v11.5c0 0.604 0.43 1.109 1 1.225v-12.725c0-0.135 0.115-0.25 0.25-0.25h7.607c-0.151-0.124-0.297-0.238-0.437-0.341z" } }] })(props);
}
const useGetCollections = (cms) => {
  const api = new TinaAdminApi(cms);
  const [info, setInfo] = useState({ collections: [], loading: true, error: false });
  useEffect(() => {
    const fetchCollections = async () => {
      const response = await api.fetchCollections();
      setInfo({
        collections: response.getCollections,
        loading: false,
        error: false
      });
    };
    fetchCollections();
  }, [cms]);
  return info;
};
const GetCollections = ({ cms, children }) => {
  const { collections, loading, error } = useGetCollections(cms);
  if (!collections)
    return null;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children(collections, loading, error));
};
const slugify = (text) => {
  return text.toString().toLowerCase().trim().replace(/[^\w\s-]/g, "").replace(/[\s_-]+/g, "_").replace(/^-+|-+$/g, "");
};
const Sidebar = ({ cms }) => {
  const screens = cms.plugins.getType("screen").all();
  return /* @__PURE__ */ React.createElement(GetCollections, {
    cms
  }, (collections, loading, error) => /* @__PURE__ */ React.createElement(Nav, {
    sidebarWidth: 360,
    showCollections: true,
    collectionsInfo: {
      collections,
      loading,
      error
    },
    screens,
    contentCreators: [],
    RenderNavSite: ({ view }) => /* @__PURE__ */ React.createElement(SidebarLink, {
      label: view.name,
      to: `screens/${slugify(view.name)}`,
      Icon: view.Icon ? view.Icon : ImFilesEmpty
    }),
    RenderNavCollection: ({ collection }) => /* @__PURE__ */ React.createElement(SidebarLink, {
      label: collection.label ? collection.label : collection.name,
      to: `collections/${collection.name}`,
      Icon: ImFilesEmpty
    })
  }));
};
const SidebarLink = (props) => {
  const { to, label, Icon } = props;
  return /* @__PURE__ */ React.createElement(NavLink, {
    className: ({ isActive }) => {
      return `text-base tracking-wide ${isActive ? "text-blue-600" : "text-gray-500"} hover:text-blue-600 flex items-center opacity-90 hover:opacity-100`;
    },
    to
  }, /* @__PURE__ */ React.createElement(Icon, {
    className: "mr-2 h-6 opacity-80 w-auto"
  }), " ", label);
};
const GetCMS = ({ children }) => {
  try {
    const cms = useCMS();
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children(cms));
  } catch (e) {
    return null;
  }
};
function BiEdit(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m7 17.013 4.413-.015 9.632-9.54c.378-.378.586-.88.586-1.414s-.208-1.036-.586-1.414l-1.586-1.586c-.756-.756-2.075-.752-2.825-.003L7 12.583v4.43zM18.045 4.458l1.589 1.583-1.597 1.582-1.586-1.585 1.594-1.58zM9 13.417l6.03-5.973 1.586 1.586-6.029 5.971L9 15.006v-1.589z" } }, { "tag": "path", "attr": { "d": "M5 21h14c1.103 0 2-.897 2-2v-8.668l-2 2V19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2z" } }] })(props);
}
function BiExit(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M19.002 3h-14c-1.103 0-2 .897-2 2v4h2V5h14v14h-14v-4h-2v4c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2V5c0-1.103-.898-2-2-2z" } }, { "tag": "path", "attr": { "d": "m11 16 5-4-5-4v3.001H3v2h8z" } }] })(props);
}
function BiLogIn(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m13 16 5-4-5-4v3H4v2h9z" } }, { "tag": "path", "attr": { "d": "M20 3h-9c-1.103 0-2 .897-2 2v4h2V5h9v14h-9v-4H9v4c0 1.103.897 2 2 2h9c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2z" } }] })(props);
}
function BiLogOut(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M16 13v-2H7V8l-5 4 5 4v-3z" } }, { "tag": "path", "attr": { "d": "M20 3h-9c-1.103 0-2 .897-2 2v4h2V5h9v14h-9v-4H9v4c0 1.103.897 2 2 2h9c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2z" } }] })(props);
}
function BiPlus(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M19 11h-6V5h-2v6H5v2h6v6h2v-6h6z" } }] })(props);
}
function MdOutlineArrowBack(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" } }, { "tag": "path", "attr": { "d": "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" } }] })(props);
}
const AuthTemplate = ({
  message,
  children
}) => {
  return /* @__PURE__ */ React.createElement("div", {
    className: "h-screen w-full bg-gradient-to-b from-blue-900 to-gray-900 flex items-center justify-center px-4 py-6"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "bg-white rounded-lg overflow-hidden shadow-lg w-full max-w-lg"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "px-5 py-4 border-b border-gray-150"
  }, /* @__PURE__ */ React.createElement("h2", {
    className: "text-2xl tracking-wide text-gray-700 flex items-center gap-0.5"
  }, /* @__PURE__ */ React.createElement("svg", {
    viewBox: "0 0 32 32",
    fill: "#EC4815",
    xmlns: "http://www.w3.org/2000/svg",
    className: "w-10 h-auto"
  }, /* @__PURE__ */ React.createElement("path", {
    d: "M18.6466 14.5553C19.9018 13.5141 20.458 7.36086 21.0014 5.14903C21.5447 2.9372 23.7919 3.04938 23.7919 3.04938C23.7919 3.04938 23.2085 4.06764 23.4464 4.82751C23.6844 5.58738 25.3145 6.26662 25.3145 6.26662L24.9629 7.19622C24.9629 7.19622 24.2288 7.10204 23.7919 7.9785C23.355 8.85496 24.3392 17.4442 24.3392 17.4442C24.3392 17.4442 21.4469 22.7275 21.4469 24.9206C21.4469 27.1136 22.4819 28.9515 22.4819 28.9515H21.0296C21.0296 28.9515 18.899 26.4086 18.462 25.1378C18.0251 23.8669 18.1998 22.596 18.1998 22.596C18.1998 22.596 15.8839 22.4646 13.8303 22.596C11.7767 22.7275 10.4072 24.498 10.16 25.4884C9.91287 26.4787 9.81048 28.9515 9.81048 28.9515H8.66211C7.96315 26.7882 7.40803 26.0129 7.70918 24.9206C8.54334 21.8949 8.37949 20.1788 8.18635 19.4145C7.99321 18.6501 6.68552 17.983 6.68552 17.983C7.32609 16.6741 7.97996 16.0452 10.7926 15.9796C13.6052 15.914 17.3915 15.5965 18.6466 14.5553Z"
  }), /* @__PURE__ */ React.createElement("path", {
    d: "M11.1268 24.7939C11.1268 24.7939 11.4236 27.5481 13.0001 28.9516H14.3511C13.0001 27.4166 12.8527 23.4155 12.8527 23.4155C12.1656 23.6399 11.3045 24.3846 11.1268 24.7939Z"
  })), /* @__PURE__ */ React.createElement("span", null, "Tina Admin"))), message && /* @__PURE__ */ React.createElement("div", {
    className: "px-5 py-4 "
  }, /* @__PURE__ */ React.createElement("p", {
    className: "text-base font-sans leading-normal"
  }, message)), /* @__PURE__ */ React.createElement("div", {
    className: "px-5 py-4 flex gap-4 w-full justify-between"
  }, children)));
};
const LoginPage = () => {
  const { setEdit } = useEditState();
  const login = () => setEdit(true);
  return /* @__PURE__ */ React.createElement(AuthTemplate, null, /* @__PURE__ */ React.createElement("a", {
    href: "/",
    className: "flex-1 text-center inline-flex justify-center items-center px-8 py-3 shadow-sm text-sm leading-4 font-medium rounded-full text-gray-600 border border-gray-150 hover:opacity-80 hover:bg-gray-50 focus:outline-none focus:shadow-outline-blue  transition duration-150 ease-out"
  }, /* @__PURE__ */ React.createElement(MdOutlineArrowBack, {
    className: "w-6 h-auto mr-1.5 opacity-80"
  }), " Back to site"), /* @__PURE__ */ React.createElement("button", {
    type: "submit",
    onClick: () => login(),
    className: "flex-1 justify-center text-center inline-flex items-center px-8 py-3 shadow-sm border border-transparent text-sm leading-4 font-medium rounded-full text-white hover:opacity-80 focus:outline-none focus:shadow-outline-blue  transition duration-150 ease-out",
    style: { background: "#0084FF" }
  }, /* @__PURE__ */ React.createElement(BiLogIn, {
    className: "w-6 h-auto mr-1.5 opacity-80"
  }), " Enter edit-mode"));
};
const logout = () => {
  setEditing(false);
  window.location.href = "/";
};
const LogoutPage = () => {
  return /* @__PURE__ */ React.createElement(AuthTemplate, null, /* @__PURE__ */ React.createElement("a", {
    href: "/",
    className: "flex-1 text-center inline-flex justify-center items-center px-8 py-3 shadow-sm text-sm leading-4 font-medium rounded-full text-gray-600 border border-gray-150 hover:opacity-80 hover:bg-gray-50 focus:outline-none focus:shadow-outline-blue  transition duration-150 ease-out"
  }, /* @__PURE__ */ React.createElement(MdOutlineArrowBack, {
    className: "w-6 h-auto mr-1.5 opacity-80"
  }), " Back to site"), /* @__PURE__ */ React.createElement("button", {
    type: "submit",
    onClick: () => logout(),
    className: "flex-1 justify-center text-center inline-flex items-center px-8 py-3 shadow-sm border border-transparent text-sm leading-4 font-medium rounded-full text-white hover:opacity-80 focus:outline-none focus:shadow-outline-blue  transition duration-150 ease-out",
    style: { background: "#0084FF" }
  }, /* @__PURE__ */ React.createElement(BiLogOut, {
    className: "w-6 h-auto mr-1.5 opacity-80"
  }), " Log out"));
};
const PageWrapper = ({
  children
}) => {
  return /* @__PURE__ */ React.createElement("div", {
    className: "relative left-0 w-full h-full bg-gray-50 shadow-2xl overflow-y-auto transition-opacity duration-300 ease-out flex flex-col opacity-100"
  }, children);
};
const PageHeader = ({
  isLocalMode,
  children
}) => /* @__PURE__ */ React.createElement(React.Fragment, null, isLocalMode && /* @__PURE__ */ React.createElement(LocalWarning, null), /* @__PURE__ */ React.createElement("div", {
  className: "bg-white pb-4 pt-18 border-b border-gray-200 px-12"
}, /* @__PURE__ */ React.createElement("div", {
  className: "w-full mx-auto max-w-screen-xl"
}, /* @__PURE__ */ React.createElement("div", {
  className: "w-full flex justify-between items-end"
}, children))));
const PageBody = ({
  children
}) => /* @__PURE__ */ React.createElement("div", {
  className: "py-10 px-12"
}, children);
const PageBodyNarrow = ({
  children
}) => /* @__PURE__ */ React.createElement("div", {
  className: "py-10 px-12"
}, /* @__PURE__ */ React.createElement("div", {
  className: "w-full mx-auto max-w-screen-xl"
}, children));
const DashboardPage = () => {
  return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => {
    var _a, _b;
    return /* @__PURE__ */ React.createElement(PageWrapper, null, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(PageHeader, {
      isLocalMode: (_b = (_a = cms.api) == null ? void 0 : _a.tina) == null ? void 0 : _b.isLocalMode
    }, /* @__PURE__ */ React.createElement("h3", {
      className: "text-2xl text-gray-700"
    }, "Welcome to Tina!")), /* @__PURE__ */ React.createElement(PageBodyNarrow, null, "This is your dashboard for editing or creating content. Select a collection on the left to begin.")));
  });
};
function FiMoreVertical(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "circle", "attr": { "cx": "12", "cy": "12", "r": "1" } }, { "tag": "circle", "attr": { "cx": "12", "cy": "5", "r": "1" } }, { "tag": "circle", "attr": { "cx": "12", "cy": "19", "r": "1" } }] })(props);
}
const useGetCollection = (cms, collectionName, includeDocuments = true) => {
  const api = new TinaAdminApi(cms);
  const [collection, setCollection] = useState(void 0);
  useEffect(() => {
    const fetchCollection = async () => {
      const response = await api.fetchCollection(collectionName, includeDocuments);
      setCollection(response.getCollection);
    };
    fetchCollection();
  }, [cms, collectionName]);
  return collection;
};
const GetCollection = ({
  cms,
  collectionName,
  includeDocuments = true,
  children
}) => {
  const collection = useGetCollection(cms, collectionName, includeDocuments);
  if (!collection) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children(collection));
};
const TemplateMenu = ({ templates }) => {
  return /* @__PURE__ */ React.createElement(Menu, {
    as: "div",
    className: "relative inline-block text-left"
  }, () => /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Menu.Button, {
    className: "icon-parent inline-flex items-center font-medium focus:outline-none focus:ring-2 focus:shadow-outline text-center rounded-full justify-center transition-all duration-150 ease-out  shadow text-white bg-blue-500 hover:bg-blue-600 focus:ring-blue-500 text-sm h-10 px-6"
  }, "Create New ", /* @__PURE__ */ React.createElement(BiPlus, {
    className: "w-5 h-full ml-1 opacity-70"
  }))), /* @__PURE__ */ React.createElement(Transition, {
    as: Fragment,
    enter: "transition ease-out duration-100",
    enterFrom: "transform opacity-0 scale-95",
    enterTo: "transform opacity-100 scale-100",
    leave: "transition ease-in duration-75",
    leaveFrom: "transform opacity-100 scale-100",
    leaveTo: "transform opacity-0 scale-95"
  }, /* @__PURE__ */ React.createElement(Menu.Items, {
    className: "origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "py-1"
  }, templates.map((template) => /* @__PURE__ */ React.createElement(Menu.Item, {
    key: `${template.label}-${template.name}`
  }, ({ active }) => /* @__PURE__ */ React.createElement(Link, {
    to: `${template.name}/new`,
    className: `w-full text-md px-4 py-2 tracking-wide flex items-center opacity-80 text-gray-600 ${active && "text-gray-800 opacity-100"}`
  }, template.label))))))));
};
const CollectionListPage = () => {
  const { collectionName } = useParams();
  const navigate = useNavigate();
  return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => {
    const plugins = cms.plugins.all("tina-admin");
    const routeMapping = plugins.find(({ name }) => name === "route-mapping");
    return /* @__PURE__ */ React.createElement(GetCollection, {
      cms,
      collectionName,
      includeDocuments: true
    }, (collection) => {
      var _a, _b;
      const totalCount = collection.documents.totalCount;
      const documents = collection.documents.edges;
      return /* @__PURE__ */ React.createElement(PageWrapper, null, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(PageHeader, {
        isLocalMode: (_b = (_a = cms == null ? void 0 : cms.api) == null ? void 0 : _a.tina) == null ? void 0 : _b.isLocalMode
      }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h3", {
        className: "text-2xl text-gray-700"
      }, collection.label ? collection.label : collection.name), !collection.templates && /* @__PURE__ */ React.createElement(Link, {
        to: `new`,
        className: "icon-parent inline-flex items-center font-medium focus:outline-none focus:ring-2 focus:shadow-outline text-center rounded-full justify-center transition-all duration-150 ease-out  shadow text-white bg-blue-500 hover:bg-blue-600 focus:ring-blue-500 text-sm h-10 px-6"
      }, "Create New", " ", /* @__PURE__ */ React.createElement(BiPlus, {
        className: "w-5 h-full ml-1 opacity-70"
      })), collection.templates && /* @__PURE__ */ React.createElement(TemplateMenu, {
        templates: collection.templates
      }))), /* @__PURE__ */ React.createElement(PageBody, null, /* @__PURE__ */ React.createElement("div", {
        className: "w-full mx-auto max-w-screen-xl"
      }, totalCount > 0 && /* @__PURE__ */ React.createElement("table", {
        className: "table-auto shadow bg-white border-b border-gray-200 w-full max-w-full rounded-lg"
      }, /* @__PURE__ */ React.createElement("tbody", {
        className: "divide-y divide-gray-150"
      }, documents.map((document) => {
        const overrideRoute = routeMapping ? routeMapping.mapper(collection, document.node) : void 0;
        return /* @__PURE__ */ React.createElement("tr", {
          key: `document-${document.node.sys.filename}`,
          className: ""
        }, /* @__PURE__ */ React.createElement("td", {
          className: "px-6 py-2 whitespace-nowrap"
        }, overrideRoute && /* @__PURE__ */ React.createElement("a", {
          className: "text-blue-600 hover:text-blue-400 flex items-center gap-3",
          href: `${overrideRoute}`
        }, /* @__PURE__ */ React.createElement(BiEdit, {
          className: "inline-block h-6 w-auto opacity-70"
        }), /* @__PURE__ */ React.createElement("span", null, /* @__PURE__ */ React.createElement("span", {
          className: "block text-xs text-gray-400 mb-1 uppercase"
        }, "Filename"), /* @__PURE__ */ React.createElement("span", {
          className: "h-5 leading-5 block whitespace-nowrap"
        }, document.node.sys.filename))), !overrideRoute && /* @__PURE__ */ React.createElement(Link, {
          className: "text-blue-600 hover:text-blue-400 flex items-center gap-3",
          to: `${document.node.sys.filename}`
        }, /* @__PURE__ */ React.createElement(BiEdit, {
          className: "inline-block h-6 w-auto opacity-70"
        }), /* @__PURE__ */ React.createElement("span", null, /* @__PURE__ */ React.createElement("span", {
          className: "block text-xs text-gray-400 mb-1 uppercase"
        }, "Filename"), /* @__PURE__ */ React.createElement("span", {
          className: "h-5 leading-5 block whitespace-nowrap"
        }, document.node.sys.filename)))), /* @__PURE__ */ React.createElement("td", {
          className: "px-6 py-4 whitespace-nowrap"
        }, /* @__PURE__ */ React.createElement("span", {
          className: "block text-xs text-gray-400 mb-1 uppercase"
        }, "Extension"), /* @__PURE__ */ React.createElement("span", {
          className: "h-5 leading-5 block text-sm font-medium text-gray-900"
        }, document.node.sys.extension)), /* @__PURE__ */ React.createElement("td", {
          className: "px-6 py-4 whitespace-nowrap"
        }, /* @__PURE__ */ React.createElement("span", {
          className: "block text-xs text-gray-400 mb-1 uppercase"
        }, "Template"), /* @__PURE__ */ React.createElement("span", {
          className: "h-5 leading-5 block text-sm font-medium text-gray-900"
        }, document.node.sys.template)), overrideRoute && /* @__PURE__ */ React.createElement("td", {
          className: "w-0"
        }, /* @__PURE__ */ React.createElement(OverflowMenu, {
          items: [
            {
              label: "Edit in Admin",
              icon: BiEdit,
              onClick: () => {
                navigate(`${document.node.sys.filename}`, { replace: true });
              }
            }
          ]
        })));
      })))))));
    });
  });
};
const OverflowMenu = ({ items = [] }) => {
  if (items.length === 0)
    return null;
  return /* @__PURE__ */ React.createElement(Menu, null, ({ open }) => /* @__PURE__ */ React.createElement("div", {
    className: "relative"
  }, /* @__PURE__ */ React.createElement(Menu.Button, {
    className: `flex-1 group px-5 py-3 flex justify-between items-center transition-all duration-300 ease-in-out transform`
  }, /* @__PURE__ */ React.createElement(FiMoreVertical, {
    className: `flex-0 w-6 h-full inline-block text-gray-400 transition-all duration-300 ease-in-out transform ${open ? `opacity-100 text-blue-500` : `opacity-70 group-hover:opacity-100`}`
  })), /* @__PURE__ */ React.createElement("div", {
    className: "transform translate-y-full absolute bottom-2 right-5 z-50"
  }, /* @__PURE__ */ React.createElement(Transition, {
    enter: "transition duration-150 ease-out",
    enterFrom: "transform opacity-0 -translate-y-2",
    enterTo: "transform opacity-100 translate-y-0",
    leave: "transition duration-75 ease-in",
    leaveFrom: "transform opacity-100 translate-y-0",
    leaveTo: "transform opacity-0 -translate-y-2"
  }, /* @__PURE__ */ React.createElement(Menu.Items, {
    className: "bg-white border border-gray-150 rounded-lg shadow-lg"
  }, items.map((item) => {
    const Icon = item.icon ? item.icon : BiExit;
    return /* @__PURE__ */ React.createElement(Menu.Item, {
      key: `menu-item-${item.label}`
    }, ({ active }) => /* @__PURE__ */ React.createElement("button", {
      className: `w-full text-base px-4 py-2 first:pt-3 last:pb-3 tracking-wide whitespace-nowrap flex items-center opacity-80 text-gray-600 ${active && "text-blue-400 bg-gray-50 opacity-100"}`,
      onClick: item.onClick
    }, /* @__PURE__ */ React.createElement(Icon, {
      className: "w-6 h-auto mr-2 text-blue-400"
    }), " ", item.label));
  }))))));
};
function HiChevronRight(props) {
  return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z", "clipRule": "evenodd" } }] })(props);
}
const useGetDocumentFields = (cms, collectionName, templateName) => {
  const api = new TinaAdminApi(cms);
  const [info, setInfo] = useState({
    collection: void 0,
    template: void 0,
    fields: void 0,
    mutationInfo: void 0
  });
  useEffect(() => {
    const fetchDocumentFields = async () => {
      const response = await api.fetchDocumentFields();
      const documentFields = response.getDocumentFields;
      const collection = documentFields[collectionName].collection;
      const mutationInfo = documentFields[collectionName].mutationInfo;
      let fields = void 0;
      let template = void 0;
      if (templateName && documentFields[collectionName].templates && documentFields[collectionName].templates[templateName]) {
        template = documentFields[collectionName].templates[templateName].template;
        fields = documentFields[collectionName].templates[templateName].fields;
      } else {
        fields = documentFields[collectionName].fields;
      }
      setInfo({
        collection,
        template,
        fields,
        mutationInfo
      });
    };
    fetchDocumentFields();
  }, [cms, collectionName]);
  return info;
};
const GetDocumentFields = ({
  cms,
  collectionName,
  templateName,
  children
}) => {
  const { collection, template, fields, mutationInfo } = useGetDocumentFields(cms, collectionName, templateName);
  if (!collection) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children({ collection, template, fields, mutationInfo }));
};
const createDocument = async (cms, collection, template, mutationInfo, values) => {
  const api = new TinaAdminApi(cms);
  const _a = values, { filename } = _a, leftover = __objRest(_a, ["filename"]);
  const { includeCollection, includeTemplate } = mutationInfo;
  const relativePath = `${filename}.${collection.format}`;
  const params = transformDocumentIntoMutationRequestPayload(__spreadValues(__spreadValues({
    _collection: collection.name
  }, template && { _template: template.name }), leftover), {
    includeCollection,
    includeTemplate
  });
  await api.createDocument(collection.name, relativePath, params);
};
const CollectionCreatePage = () => {
  const { collectionName, templateName } = useParams();
  return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => /* @__PURE__ */ React.createElement(GetDocumentFields, {
    cms,
    collectionName,
    templateName
  }, ({ collection, template, fields, mutationInfo }) => /* @__PURE__ */ React.createElement(RenderForm$1, {
    cms,
    collection,
    template,
    fields,
    mutationInfo
  })));
};
const RenderForm$1 = ({ cms, collection, template, fields, mutationInfo }) => {
  var _a, _b;
  const navigate = useNavigate();
  const [formIsPristine, setFormIsPristine] = useState(true);
  const form = useMemo(() => {
    return new Form({
      id: "create-form",
      label: "form",
      fields: [
        {
          name: "filename",
          label: "Filename",
          component: "text",
          description: `A unique filename for the content.  Example: My_Document`,
          placeholder: `My_Document`,
          validate: (value, allValues, meta) => {
            if (!value) {
              if (meta.dirty) {
                return "Required";
              }
              return true;
            }
            const isValid = /^[_a-zA-Z][-,_a-zA-Z0-9]*$/.test(value);
            if (value && !isValid) {
              return "Must begin with a-z, A-Z, or _ and contain only a-z, A-Z, 0-9, - or _";
            }
          }
        },
        ...fields
      ],
      onSubmit: async (values) => {
        await createDocument(cms, collection, template, mutationInfo, values);
        navigate(`/collections/${collection.name}`);
      }
    });
  }, [cms, collection, template, fields, mutationInfo]);
  return /* @__PURE__ */ React.createElement(PageWrapper, null, /* @__PURE__ */ React.createElement(React.Fragment, null, ((_b = (_a = cms == null ? void 0 : cms.api) == null ? void 0 : _a.tina) == null ? void 0 : _b.isLocalMode) && /* @__PURE__ */ React.createElement(LocalWarning, null), /* @__PURE__ */ React.createElement("div", {
    className: "py-4 px-20 border-b border-gray-200 bg-white"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "max-w-form mx-auto"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "mb-2"
  }, /* @__PURE__ */ React.createElement("span", {
    className: "block text-sm leading-tight uppercase text-gray-400 mb-1"
  }, /* @__PURE__ */ React.createElement(Link, {
    to: `/collections/${collection.name}`,
    className: "inline-block text-current hover:text-blue-400 focus:underline focus:outline-none focus:text-blue-400 font-medium transition-colors duration-150 ease-out"
  }, collection.label ? collection.label : collection.name), /* @__PURE__ */ React.createElement(HiChevronRight, {
    className: "inline-block -mt-0.5 opacity-50"
  })), /* @__PURE__ */ React.createElement("span", {
    className: "text-xl text-gray-700 font-medium leading-tight"
  }, "Create New")), /* @__PURE__ */ React.createElement(FormStatus, {
    pristine: formIsPristine
  }))), /* @__PURE__ */ React.createElement(FormBuilder, {
    form,
    onPristineChange: setFormIsPristine
  })));
};
const useGetDocument = (cms, collectionName, relativePath) => {
  const api = new TinaAdminApi(cms);
  const [document, setDocument] = useState(void 0);
  useEffect(() => {
    const fetchDocument = async () => {
      const response = await api.fetchDocument(collectionName, relativePath);
      setDocument(response.getDocument);
    };
    fetchDocument();
  }, [cms, collectionName, relativePath]);
  return document;
};
const GetDocument = ({
  cms,
  collectionName,
  relativePath,
  children
}) => {
  const document = useGetDocument(cms, collectionName, relativePath);
  if (!document) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children(document));
};
const updateDocument = async (cms, relativePath, collection, mutationInfo, values) => {
  const api = new TinaAdminApi(cms);
  const { includeCollection, includeTemplate } = mutationInfo;
  const params = transformDocumentIntoMutationRequestPayload(values, {
    includeCollection,
    includeTemplate
  });
  await api.updateDocument(collection.name, relativePath, params);
};
const CollectionUpdatePage = () => {
  const { collectionName, filename } = useParams();
  return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => /* @__PURE__ */ React.createElement(GetDocumentFields, {
    cms,
    collectionName
  }, ({ collection, mutationInfo }) => {
    const relativePath = `${filename}.${collection.format}`;
    return /* @__PURE__ */ React.createElement(GetDocument, {
      cms,
      collectionName: collection.name,
      relativePath
    }, (document) => /* @__PURE__ */ React.createElement(RenderForm, {
      cms,
      document,
      filename,
      relativePath,
      collection,
      mutationInfo
    }));
  }));
};
const RenderForm = ({
  cms,
  document,
  filename,
  relativePath,
  collection,
  mutationInfo
}) => {
  var _a, _b;
  const navigate = useNavigate();
  const [formIsPristine, setFormIsPristine] = useState(true);
  const form = useMemo(() => {
    return new Form({
      id: "update-form",
      label: "form",
      fields: document.form.fields,
      initialValues: document.values,
      onSubmit: async (values) => {
        await updateDocument(cms, relativePath, collection, mutationInfo, values);
        navigate(`/collections/${collection.name}`);
      }
    });
  }, [cms, document, relativePath, collection, mutationInfo]);
  return /* @__PURE__ */ React.createElement(PageWrapper, null, /* @__PURE__ */ React.createElement(React.Fragment, null, ((_b = (_a = cms == null ? void 0 : cms.api) == null ? void 0 : _a.tina) == null ? void 0 : _b.isLocalMode) && /* @__PURE__ */ React.createElement(LocalWarning, null), /* @__PURE__ */ React.createElement("div", {
    className: "py-4 px-20 border-b border-gray-200 bg-white"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "max-w-form mx-auto"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "mb-2"
  }, /* @__PURE__ */ React.createElement("span", {
    className: "block text-sm leading-tight uppercase text-gray-400 mb-1"
  }, /* @__PURE__ */ React.createElement(Link, {
    to: `/collections/${collection.name}`,
    className: "inline-block text-current hover:text-blue-400 focus:underline focus:outline-none focus:text-blue-400 font-medium transition-colors duration-150 ease-out"
  }, collection.label ? collection.label : collection.name), /* @__PURE__ */ React.createElement(HiChevronRight, {
    className: "inline-block -mt-0.5 opacity-50"
  })), /* @__PURE__ */ React.createElement("span", {
    className: "text-xl text-gray-700 font-medium leading-tight"
  }, "Edit ", `${filename}.${collection.format}`)), /* @__PURE__ */ React.createElement(FormStatus, {
    pristine: formIsPristine
  }))), /* @__PURE__ */ React.createElement(FormBuilder, {
    form,
    onPristineChange: setFormIsPristine
  })));
};
const ScreenPage = () => {
  const { screenName } = useParams();
  return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => {
    var _a, _b;
    const screens = cms.plugins.getType("screen").all();
    const selectedScreen = screens.find(({ name }) => slugify(name) === screenName);
    return /* @__PURE__ */ React.createElement("div", {
      className: "relative w-full h-full flex flex-col items-stretch justify-between"
    }, ((_b = (_a = cms == null ? void 0 : cms.api) == null ? void 0 : _a.tina) == null ? void 0 : _b.isLocalMode) && /* @__PURE__ */ React.createElement(LocalWarning, null), /* @__PURE__ */ React.createElement("div", {
      className: "flex-1 overflow-y-auto relative flex flex-col items-stretch justify-between"
    }, /* @__PURE__ */ React.createElement(selectedScreen.Component, {
      close: () => {
      }
    })));
  });
};
const Redirect = () => {
  React.useEffect(() => {
    if (window) {
      window.location.assign("/");
    }
  }, []);
  return null;
};
const TinaAdmin = () => {
  const isSSR = typeof window === "undefined";
  const { edit } = useEditState();
  if (isSSR) {
    return null;
  }
  if (!edit) {
    return /* @__PURE__ */ React.createElement(Layout, null, /* @__PURE__ */ React.createElement(LoginPage, null));
  }
  return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => {
    const isTinaAdminEnabled = cms.flags.get("tina-admin");
    if (isTinaAdminEnabled) {
      return /* @__PURE__ */ React.createElement(Layout, null, /* @__PURE__ */ React.createElement(BrowserRouter, {
        basename: "/admin"
      }, /* @__PURE__ */ React.createElement("div", {
        className: "flex items-stretch h-screen overflow-hidden"
      }, /* @__PURE__ */ React.createElement(Sidebar, {
        cms
      }), /* @__PURE__ */ React.createElement("div", {
        className: "flex-1"
      }, /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(Route, {
        path: "collections/:collectionName/new",
        element: /* @__PURE__ */ React.createElement(CollectionCreatePage, null)
      }), /* @__PURE__ */ React.createElement(Route, {
        path: "collections/:collectionName/:templateName/new",
        element: /* @__PURE__ */ React.createElement(CollectionCreatePage, null)
      }), /* @__PURE__ */ React.createElement(Route, {
        path: "collections/:collectionName/:filename",
        element: /* @__PURE__ */ React.createElement(CollectionUpdatePage, null)
      }), /* @__PURE__ */ React.createElement(Route, {
        path: "collections/:collectionName",
        element: /* @__PURE__ */ React.createElement(CollectionListPage, null)
      }), /* @__PURE__ */ React.createElement(Route, {
        path: "screens/:screenName",
        element: /* @__PURE__ */ React.createElement(ScreenPage, null)
      }), /* @__PURE__ */ React.createElement(Route, {
        path: "/",
        element: /* @__PURE__ */ React.createElement(DashboardPage, null)
      }))))));
    } else {
      return /* @__PURE__ */ React.createElement(Layout, null, /* @__PURE__ */ React.createElement(BrowserRouter, {
        basename: "/admin"
      }, /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(Route, {
        path: "logout",
        element: /* @__PURE__ */ React.createElement(LogoutPage, null)
      }), /* @__PURE__ */ React.createElement(Route, {
        path: "/",
        element: /* @__PURE__ */ React.createElement(Redirect, null)
      }))));
    }
  });
};
class RouteMappingPlugin {
  constructor(mapper) {
    this.__type = "tina-admin";
    this.name = "route-mapping";
    this.mapper = mapper;
  }
}
export { AuthWallInner, Client, DEFAULT_LOCAL_TINA_GQL_SERVER_URL, LocalClient, RouteMappingPlugin, TinaAdmin, TinaAdminApi, TinaCMSProvider2, TinaCloudAuthWall, TinaCloudProvider, TinaDataProvider, assertShape, createClient, TinaCMSProvider2 as default, getStaticPropsForTina, gql, safeAssertShape, staticRequest, useDocumentCreatorPlugin, useGraphqlForms, useTinaAuthRedirect };
